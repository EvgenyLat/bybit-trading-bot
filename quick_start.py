#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ Bybit
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
"""

import os
import sys
from pathlib import Path

def print_banner():
    """–ö—Ä–∞—Å–∏–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
    print("ü§ñ" + "="*50)
    print("üöÄ BYBIT TRADING BOT - QUICK START")
    print("ü§ñ" + "="*50)
    print()

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫"""
    print("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    required_packages = [
        'pandas', 'numpy', 'pybit', 'ccxt', 'ta', 
        'requests', 'pyyaml', 'python-dotenv'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package)
            print(f"‚úÖ {package} - —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError:
            print(f"‚ùå {package} - –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
            missing_packages.append(package)
    
    if missing_packages:
        print(f"\n‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: {', '.join(missing_packages)}")
        print("üìã –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π:")
        print(f"pip install {' '.join(missing_packages)}")
        return False
    
    print("\n‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    return True

def check_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\n‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞–∂tion check...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
    env_file = Path(".env")
    if env_file.exists():
        print("‚úÖ .env —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω")
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–∂–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        with open(env_file, 'r', encoding='utf-8') as f:
            content = f.read()
            
        if "BYBIT_API_KEY=" in content and "–≤–∞—à_api_–∫–ª—é—á" not in content:
            print("‚úÖ Bybit API –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        else:
            print("‚ö†Ô∏è Bybit API –∫–ª—é—á–∏ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å")
            return False
            
    else:
        print("‚ùå .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏–∑ config/secrets.env.example")
        return False
    
    return True

def test_trading_logic():
    """–¢–µ—Å—Ç —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–∏...")
    
    try:
        import pandas as pd
        import numpy as np
        import ta
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_prices = [45000, 45150, 44950, 44800, 45200, 45050, 
                      45000, 45100, 44900, 44750, 44600, 44850, 
                      45000, 45150, 45050, 44900, 44750, 44800, 44950]
        
        data = pd.DataFrame({'close': test_prices})
        
        # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        data['rsi'] = ta.momentum.rsi(data['close'])
        data['sma_5'] = ta.trend.sma(data['close'], window=5)
        data['sma_20'] = ta.trend.sma(data['close'], window=20)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
        current_rsi = data['rsi'].iloc[-1]
        current_sma5 = data['sma_5'].iloc[-1]
        current_sma20 = data['sma_20'].iloc[-1]
        
        signal = "HOLD"
        reasons = []
        
        if current_rsi < 30:
            signal = "BUY"
            reasons.append("RSI –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å")
        elif current_rsi > 70:
            signal = "SELL"
            reasons.append("RSI –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å")
        
        if current_sma5 > current_sma20 and signal == "HOLD":
            signal = "BUY"
            reasons.append("–í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
        
        print(f"üìä –¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:")
        print(f"   üí∞ –¶–µ–Ω–∞: ${int(data['close'].iloc[-1]):,}")
        print(f"   üìà RSI: {current_rsi:.1f}")
        print(f"   üìä SMA 5: ${current_sma5:.0f}")
        print(f"   üìä SMA 20: ${current_sma20:.0f}")
        print(f"   üéØ –°–∏–≥–Ω–∞–ª: {signal}")
        print(f"   üìù –ü—Ä–∏—á–∏–Ω—ã: {', '.join(reasons) if reasons else '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ'}")
        
        print("\n‚úÖ –¢–æ—Ä–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–µ: {e}")
        return False

def test_bybit_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit...")
    
    try:
        from pybit.unified_trading import HTTP
        import os
        from dotenv import load_dotenv
        
        load_dotenv()
        
        api_key = os.getenv('BYBIT_API_KEY')
        api_secret = os.getenv('BYBIT_API_SECRET')
        testnet = os.getenv('BYBIT_TESTNET', 'true').lower() == 'true'
        
        if not api_key or api_key == '–≤–∞—à_api_–∫–ª—é—á':
            print("‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return False
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
        print(f"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
        print(f"   üì° Testnet: {testnet}")
        print(f"   üîë API Key: {api_key[:10]}...")
        
        print("\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!")
        print("üí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def show_next_steps():
    """–ü–æ–∫–∞–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤"""
    print("\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("="*50)
    print("1. üìù –ù–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏ –≤ —Ñ–∞–π–ª–µ .env")
    print("2. üß™ –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º:")
    print("   python simple_trading_bot.py")
    print("3. üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    print("4. üí∞ –ù–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª–æ–π —Å—É–º–º—ã –Ω–∞ TESTNET")
    print("5. üìà –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Ç–æ—Ä–≥–æ–≤–ª—é")
    print("="*50)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
    print_banner()
    
    all_good = True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not check_requirements():
        all_good = False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not check_config():
        all_good = False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –ª–æ–≥–∏–∫—É
    if not test_trading_logic():
        all_good = False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if not test_bybit_connection():
        all_good = False
    
    print("\n" + "="*50)
    if all_good:
        print("üéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –¢–û–†–ì–û–í–õ–ï!")
        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("‚ö†Ô∏è –ù–£–ñ–ù–´ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
        print("‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
    
    show_next_steps()
    
    print("\nüìö –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–º. README.md –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é")
    print("üîí –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Ç–æ—Ä–≥–æ–≤–ª–∏!")

if __name__ == "__main__":
    main()
