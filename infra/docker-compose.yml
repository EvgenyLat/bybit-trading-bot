version: '3.8'

services:
  # TimescaleDB for time-series data storage
  timescaledb:
    image: timescale/timescaledb:latest-pg14
    container_name: bybit_timescaledb
    environment:
      POSTGRES_DB: trading_bot
      POSTGRES_USER: trading_user
      POSTGRES_PASSWORD: ${TIMESCALEDB_PASSWORD:-secure_password}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
      - ./infra/timescaledb/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - trading_network
    restart: unless-stopped

  # Redis for caching and real-time data
  redis:
    image: redis:7-alpine
    container_name: bybit_redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - trading_network
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: bybit_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - trading_network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: bybit_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/grafana/provisioning:/etc/grafana/provisioning
      - ./infra/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - trading_network
    restart: unless-stopped

  # MLflow for experiment tracking
  mlflow:
    image: python:3.10-slim
    container_name: bybit_mlflow
    ports:
      - "5000:5000"
    volumes:
      - ./:/app
      - mlflow_data:/mlflow
    working_dir: /app
    command: >
      bash -c "
        pip install mlflow psycopg2-binary &&
        mlflow server 
        --backend-store-uri postgresql://trading_user:${TIMESCALEDB_PASSWORD:-secure_password}@timescaledb:5432/trading_bot 
        --default-artifact-root /mlflow 
        --host 0.0.0.0 
        --port 5000
      "
    depends_on:
      - timescaledb
    networks:
      - trading_network
    restart: unless-stopped

  # Trading Bot Application
  trading_bot:
    build:
      context: .
      dockerfile: infra/Dockerfile
    container_name: bybit_trading_bot
    environment:
      - PYTHONPATH=/app
      - TIMESCALEDB_HOST=timescaledb
      - TIMESCALEDB_PORT=5432
      - TIMESCALEDB_DBNAME=trading_bot
      - TIMESCALEDB_USER=trading_user
      - TIMESCALEDB_PASSWORD=${TIMESCALEDB_PASSWORD:-secure_password}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_password}
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - BYBIT_API_KEY=${BYBIT_API_KEY}
      - BYBIT_API_SECRET=${BYBIT_API_SECRET}
      - BYBIT_TESTNET=${BYBIT_TESTNET:-true}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
    volumes:
      - ./:/app
      - ./logs:/app/logs
      - ./data:/app/data
      - ./models:/app/models
    depends_on:
      - timescaledb
      - redis
      - mlflow
    networks:
      - trading_network
    restart: unless-stopped
    command: python src/main.py

volumes:
  timescaledb_data:
  redis_data:
  prometheus_data:
  grafana_data:
  mlflow_data:

networks:
  trading_network:
    driver: bridge

