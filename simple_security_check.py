#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîí SIMPLE Security Check Script 
–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∫–æ–º–∞–Ω–¥
"""

import os
import re
from pathlib import Path
from typing import List

def check_env_file() -> List[str]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ .env"""
    print("üîç Checking .env file...")
    
    issues = []
    env_file = Path('.env')
    gitignore_file = Path('.gitignore')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ .env
    if not env_file.exists():
        issues.append("‚ùå .env file not found")
        return issues
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .gitignore
    if not gitignore_file.exists():
        issues.append("‚ùå .gitignore file missing")
    else:
        gitignore_content = gitignore_file.read_text()
        if '.env' not in gitignore_content:
            issues.append("‚ùå .env not in .gitignore")
    
    # –ß–∏—Ç–∞–µ–º .env –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º
    try:
        env_content = env_file.read_text()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        test_patterns = [
            '–≤–∞—à_api_–∫–ª—é—á',
            'test_key', 
            'example_key',
            'your_key_here'
        ]
        
        for pattern in test_patterns:
            if pattern in env_content.lower():
                issues.append(f"‚ö†Ô∏è Test pattern found in .env: {pattern}")
        
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        required_vars = ['BYBIT_API_KEY', 'BYBIT_API_SECRET']
        for var in required_vars:
            if f"{var}=" not in env_content:
                issues.append(f"‚ùå Missing required variable: {var}")
                
        if not issues:
            print("‚úÖ .env file configuration OK")
            
    except Exception as e:
        issues.append(f"‚ùå Error reading .env: {e}")
        
    return issues

def check_secrets_in_files() -> List[str]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤ —Ñ–∞–π–ª–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞"""
    print("üîç Checking for secrets in project files...")
    
    issues = []
    patterns = [
        r'api_key\s*=\s*["\'][^"\']+["\']',
        r'api_secret\s*=\s*["\'][^"\']+["\']',
        r'ghp_[a-zA-Z0-9]{36}',  # GitHub tokens
    ]
    
    excluded_files = ['.env', '.git/', '__pycache__/', '.vscode/', '.idea/']
    
    for pattern in patterns:
        for py_file in Path('.').rglob('*.py'):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            if any(exc in str(py_file) for exc in excluded_files):
                continue
                
            try:
                content = py_file.read_text(encoding='utf-8')
                matches = re.findall(pattern, content, re.IGNORECASE)
                
                for match in matches:
                    # –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
                    if any(word in match.lower() for word in ['example', 'test', 'demo']):
                        continue
                        
                    issues.append(f"‚ö†Ô∏è Potential secret in {py_file}: {match[:20]}...")
                    
            except Exception:
                pass
                
    if not issues:
        print("‚úÖ No hardcoded secrets found in code")
        
    return issues

def check_config_files() -> List[str]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print("üîç Checking configuration files...")
    
    issues = []
    config_files = [
        'config/config.yaml',
        'config/risk_config.yaml', 
        'config/secrets.env.example'
    ]
    
    for config_file in config_files:
        config_path = Path(config_file)
        if not config_path.exists():
            issues.append(f"‚ùå Missing config file: {config_file}")
    
    if not issues:
        print("‚úÖ All required config files present")
        
    return issues

def check_dangerous_patterns() -> List[str]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–∞—Å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –∫–æ–¥–µ"""
    print("üîç Checking for dangerous code patterns...")
    
    issues = []
    dangerous_patterns = [
        (r'eval\s*\(', 'eval() function'),
        (r'exec\s*\(', 'exec() function'),
        (r'__import__\s*\(', '__import__ function'),
        (r'pickle\.loads', 'pickle deserialization'),
        (r'shell=True', 'shell command execution')
    ]
    
    for pattern, description in dangerous_patterns:
        for py_file in Path('src').rglob('*.py'):
            try:
                content = py_file.read_text(encoding='utf-8')
                if re.search(pattern, content):
                    issues.append(f"‚ö†Ô∏è {description} in {py_file.name}")
            except Exception:
                pass
                
    if not issues:
        print("‚úÖ No dangerous code patterns found")
        
    return issues

def generate_security_report() -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    print("\nüîí SIMPLE SECURITY REPORT")
    print("=" * 50)
    
    all_checks = [
        ("Environment File", check_env_file()),
        ("Secret Detection", check_secrets_in_files()),
        ("Configuration Files", check_config_files()),
        ("Code Safety", check_dangerous_patterns())
    ]
    
    critical_count = 0
    warning_count = 0
    report = []
    
    for check_name, issues in all_checks:
        if issues:
            report.append(f"\nüìã {check_name}:")
            for issue in issues:
                if "‚ùå" in issue:
                    critical_count += 1
                else:
                    warning_count += 1
                report.append(f"   {issue}")
        else:
            report.append(f"\n‚úÖ {check_name}: PASSED")
    
    # –ò—Ç–æ–≥–∏
    report.append(f"\n{'='*50}")
    report.append(f"üìä SUMMARY:")
    report.append(f"   üî¥ Critical Issues: {critical_count}")
    report.append(f"   ‚ö†Ô∏è Warnings: {warning_count}")
    
    if critical_count == 0:
        report.append(f"   ‚úÖ Overall Status: SECURE")
    else:
        report.append(f"   üö® Overall Status: REQUIRES ATTENTION")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    report.append(f"\nüîß RECOMMENDATIONS:")
    if critical_count > 0:
        report.append(f"   1. Fix critical issues before deployment")
        report.append(f"   2. Secure your .env file")
    
    report.append(f"   3. Install security tools: pip install bandit safety")
    report.append(f"   4. Use GitHub Advanced Security")
    report.append(f"   5. Regular security audits")
    
    return '\n'.join(report)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîí Starting simple security check...")
    
    try:
        report = generate_security_report()
        print(report)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        with open('security_report.txt', 'w', encoding='utf-8') as f:
            f.write(report)
        
        print(f"\nüìÑ Report saved to: security_report.txt")
        
        return 0
        
    except Exception as e:
        print(f"‚ùå Security check failed: {e}")
        return 1

if __name__ == "__main__":
    exit(main())
