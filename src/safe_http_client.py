#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üõ°Ô∏è Safe HTTP Client with Timeouts
–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π HTTP –∫–ª–∏–µ–Ω—Ç —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏ –∏ retry –ª–æ–≥–∏–∫–æ–π
"""

import time
import requests
from typing import Dict, Any, Optional
from tenacity import (
    retry, 
    stop_after_attempt, 
    wait_exponential, 
    retry_if_exception_type,
    before_sleep_log
)
import logging

class SafeHTTPClient:
    """üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π HTTP –∫–ª–∏–µ–Ω—Ç —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏ –∏ retry"""
    
    def __init__(self, timeout: int = 10, max_retries: int = 3):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ HTTP –∫–ª–∏–µ–Ω—Ç–∞
        
        Args:
            timeout: –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤
        """
        self.timeout = timeout
        self.max_retries = max_retries
        self.logger = logging.getLogger('SafeHTTPClient')
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'BybitTradingBot/1.0',
            'Content-Type': 'application/json'
        })
    
    @retry(
        stop=stop_after_attempt(3),
        wait=wait_exponential(multiplier=1, min=1, max=10),
        retry=retry_if_exception_type((
            requests.exceptions.Timeout,
            requests.exceptions.ConnectionError,
            requests.exceptions.HTTPError
        )),
        before_sleep=before_sleep_log(logging.getLogger('SafeHTTPClient'), logging.WARNING)
    )
    def safe_get(self, url: str, params: Optional[Dict] = None, **kwargs) -> requests.Response:
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π GET –∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
        kwargs.setdefault('timeout', self.timeout)
        
        try:
            response = self.session.get(url, params=params, **kwargs)
            response.raise_for_status()
            return response
        except requests.exceptions.Timeout:
            self.logger.warning(f"‚è∞ Timeout for GET {url}")
            raise
        except requests.exceptions.ConnectionError:
            self.logger.warning(f"üîå Connection error for GET {url}")
            raise
        except requests.exceptions.HTTPError as e:
            self.logger.warning(f"üåê HTTP error for GET {url}: {e}")
            raise
    
    @retry(
        stop=stop_after_attempt(3),
        wait=wait_exponential(multiplier=1, min=1, max=10),
        retry=retry_if_exception_type((
            requests.exceptions.Timeout,
            requests.exceptions.ConnectionError,
            requests.exceptions.HTTPError
        )),
        before_sleep=before_sleep_log(logging.getLogger('SafeHTTPClient'), logging.WARNING)
    )
    def safe_post(self, url: str, data: Optional[Dict] = None, json: Optional[Dict] = None, **kwargs) -> requests.Response:
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π POST –∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
        kwargs.setdefault('timeout', self.timeout)
        
        try:
            response = self.session.post(url, data=data, json=json, **kwargs)
            response.raise_for_status()
            return response
        except requests.exceptions.Timeout:
            self.logger.warning(f"‚è∞ Timeout for POST {url}")
            raise
        except requests.exceptions.ConnectionError:
            self.logger.warning(f"üîå Connection error for POST {url}")
            raise
        except requests.exceptions.HTTPError as e:
            self.logger.warning(f"üåê HTTP error for POST {url}: {e}")
            raise
    
    @retry(
        stop=stop_after_attempt(3),
        wait=wait_exponential(multiplier=1, min=1, max=10),
        retry=retry_if_exception_type((
            requests.exceptions.Timeout,
            requests.exceptions.ConnectionError,
            requests.exceptions.HTTPError
        )),
        before_sleep=before_sleep_log(logging.getLogger('SafeHTTPClient'), logging.WARNING)
    )
    def safe_put(self, url: str, data: Optional[Dict] = None, json: Optional[Dict] = None, **kwargs) -> requests.Response:
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π PUT –∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
        kwargs.setdefault('timeout', self.timeout)
        
        try:
            response = self.session.put(url, data=data, json=json, **kwargs)
            response.raise_for_status()
            return response
        except requests.exceptions.Timeout:
            self.logger.warning(f"‚è∞ Timeout for PUT {url}")
            raise
        except requests.exceptions.ConnectionError:
            self.logger.warning(f"üîå Connection error for PUT {url}")
            raise
        except requests.exceptions.HTTPError as e:
            self.logger.warning(f"üåê HTTP error for PUT {url}: {e}")
            raise
    
    @retry(
        stop=stop_after_attempt(3),
        wait=wait_exponential(multiplier=1, min=1, max=10),
        retry=retry_if_exception_type((
            requests.exceptions.Timeout,
            requests.exceptions.ConnectionError,
            requests.exceptions.HTTPError
        )),
        before_sleep=before_sleep_log(logging.getLogger('SafeHTTPClient'), logging.WARNING)
    )
    def safe_delete(self, url: str, **kwargs) -> requests.Response:
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π DELETE –∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
        kwargs.setdefault('timeout', self.timeout)
        
        try:
            response = self.session.delete(url, **kwargs)
            response.raise_for_status()
            return response
        except requests.exceptions.Timeout:
            self.logger.warning(f"‚è∞ Timeout for DELETE {url}")
            raise
        except requests.exceptions.ConnectionError:
            self.logger.warning(f"üîå Connection error for DELETE {url}")
            raise
        except requests.exceptions.HTTPError as e:
            self.logger.warning(f"üåê HTTP error for DELETE {url}: {e}")
            raise
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏"""
        self.session.close()

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–∞—É—Ç–æ–≤
def with_timeout(timeout: int = 10):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–∞—É—Ç–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º"""
    def decorator(func):
        def wrapper(*args, **kwargs):
            kwargs.setdefault('timeout', timeout)
            return func(*args, **kwargs)
        return wrapper
    return decorator

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    client = SafeHTTPClient(timeout=15)
    
    try:
        # –ü—Ä–∏–º–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        response = client.safe_get("https://api.bybit.com/v5/market/time")
        print(f"‚úÖ Response: {response.status_code}")
        print(f"üìä Data: {response.json()}")
    except Exception as e:
        print(f"‚ùå Error: {e}")
    finally:
        client.close()
