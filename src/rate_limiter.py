#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üõ°Ô∏è Rate Limiter for API Calls
–ó–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API –±–∏—Ä–∂–∏
"""

import time
import threading
from collections import deque
from typing import Callable, Any
import logging

class RateLimiter:
    """üõ°Ô∏è Rate limiter –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API"""
    
    def __init__(self, max_calls: int = 100, period: int = 60):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è rate limiter
        
        Args:
            max_calls: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–æ–≤–æ–≤
            period: –ü–µ—Ä–∏–æ–¥ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        self.max_calls = max_calls
        self.period = period
        self.calls = deque()
        self.lock = threading.Lock()
        self.logger = logging.getLogger('RateLimiter')
        
    def __call__(self, func: Callable) -> Callable:
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è rate limiting"""
        def wrapper(*args, **kwargs):
            self._wait_if_needed()
            return func(*args, **kwargs)
        return wrapper
    
    def _wait_if_needed(self):
        """–û–∂–∏–¥–∞–Ω–∏–µ –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç"""
        with self.lock:
            now = time.time()
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤—ã–∑–æ–≤—ã
            while self.calls and self.calls[0] < now - self.period:
                self.calls.popleft()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
            if len(self.calls) >= self.max_calls:
                sleep_time = self.period - (now - self.calls[0])
                if sleep_time > 0:
                    self.logger.warning(f"‚è∞ Rate limit reached, sleeping {sleep_time:.2f}s")
                    time.sleep(sleep_time)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–∑–æ–≤
            self.calls.append(now)
    
    def get_remaining_calls(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≤—ã–∑–æ–≤–æ–≤"""
        with self.lock:
            now = time.time()
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤—ã–∑–æ–≤—ã
            while self.calls and self.calls[0] < now - self.period:
                self.calls.popleft()
            
            return self.max_calls - len(self.calls)
    
    def reset(self):
        """–°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞"""
        with self.lock:
            self.calls.clear()

class BybitRateLimiter:
    """üõ°Ô∏è –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π rate limiter –¥–ª—è Bybit API"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ª–∏–º–∏—Ç–∞–º–∏ Bybit"""
        # Bybit –ª–∏–º–∏—Ç—ã:
        # - 120 requests per minute –¥–ª—è REST API
        # - 10 requests per second –¥–ª—è orders
        self.rest_limiter = RateLimiter(max_calls=120, period=60)
        self.order_limiter = RateLimiter(max_calls=10, period=1)
        self.logger = logging.getLogger('BybitRateLimiter')
    
    def rest_api_call(self, func: Callable) -> Callable:
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è REST API –≤—ã–∑–æ–≤–æ–≤"""
        return self.rest_limiter(func)
    
    def order_call(self, func: Callable) -> Callable:
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è order API –≤—ã–∑–æ–≤–æ–≤"""
        return self.order_limiter(func)
    
    def get_status(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –ª–∏–º–∏—Ç–µ—Ä–æ–≤"""
        return {
            'rest_remaining': self.rest_limiter.get_remaining_calls(),
            'order_remaining': self.order_limiter.get_remaining_calls(),
            'rest_limit': self.rest_limiter.max_calls,
            'order_limit': self.order_limiter.max_calls
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ
bybit_rate_limiter = BybitRateLimiter()

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ rate limiter
    limiter = RateLimiter(max_calls=5, period=10)
    
    @limiter
    def test_function():
        print(f"Function called at {time.time()}")
        return "success"
    
    print("Testing rate limiter...")
    for i in range(8):
        result = test_function()
        print(f"Call {i+1}: {result}")
    
    print("Rate limiter test completed")
