#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üö® Circuit Breaker for Flash Crash Protection
–ó–∞—â–∏—Ç–∞ –æ—Ç –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π —Ä—ã–Ω–∫–∞ –∏ —Ñ–ª–µ—à-–∫—Ä—ç—à–µ–π
"""

import time
import logging
from collections import deque
from typing import Optional, Dict, Any
from decimal import Decimal

class CircuitBreaker:
    """üö® Circuit breaker –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π —Ä—ã–Ω–∫–∞"""
    
    def __init__(self, 
                 max_price_move: float = 0.05,  # 5% –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
                 time_window: int = 60,         # –æ–∫–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                 max_positions: int = 100):      # –º–∞–∫—Å–∏–º—É–º –ø–æ–∑–∏—Ü–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è circuit breaker
        
        Args:
            max_price_move: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
            time_window: –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            max_positions: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏
        """
        self.max_price_move = max_price_move
        self.time_window = time_window
        self.price_history = deque(maxlen=max_positions)
        self.logger = logging.getLogger('CircuitBreaker')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.anomalies_detected = 0
        self.last_anomaly_time = None
        
    def check_anomaly(self, current_price: float, symbol: str = "UNKNOWN") -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω–æ–º–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã
        
        Args:
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            
        Returns:
            True –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–Ω–æ–º–∞–ª–∏—è
        """
        current_time = time.time()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.price_history.append((current_time, current_price))
        
        # –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —Ç–æ—á–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        if len(self.price_history) < 2:
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –æ–∫–Ω–µ
        recent_prices = [
            price for timestamp, price in self.price_history 
            if current_time - timestamp <= self.time_window
        ]
        
        if len(recent_prices) < 2:
            return False
        
        # –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≤ –æ–∫–Ω–µ
        min_price = min(recent_prices)
        max_price = max(recent_prices)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–æ–º–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
        price_range = max_price - min_price
        avg_price = sum(recent_prices) / len(recent_prices)
        price_move_pct = price_range / avg_price
        
        if price_move_pct > self.max_price_move:
            self.anomalies_detected += 1
            self.last_anomaly_time = current_time
            
            self.logger.critical(
                f"üö® FLASH CRASH DETECTED! "
                f"Symbol: {symbol}, "
                f"Price move: {price_move_pct:.2%}, "
                f"Range: {min_price:.2f} - {max_price:.2f}, "
                f"Anomalies: {self.anomalies_detected}"
            )
            
            return True
        
        return False
    
    def get_market_volatility(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞"""
        if len(self.price_history) < 2:
            return 0.0
        
        current_time = time.time()
        recent_prices = [
            price for timestamp, price in self.price_history 
            if current_time - timestamp <= self.time_window
        ]
        
        if len(recent_prices) < 2:
            return 0.0
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
        avg_price = sum(recent_prices) / len(recent_prices)
        variance = sum((price - avg_price) ** 2 for price in recent_prices) / len(recent_prices)
        volatility = (variance ** 0.5) / avg_price
        
        return volatility
    
    def should_trade(self, symbol: str = "UNKNOWN") -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–∂–Ω–æ –ª–∏ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            
        Returns:
            True –µ—Å–ª–∏ –º–æ–∂–Ω–æ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å
        """
        # –ï—Å–ª–∏ –Ω–µ–¥–∞–≤–Ω–æ –±—ã–ª–∞ –∞–Ω–æ–º–∞–ª–∏—è, –±–ª–æ–∫–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
        if self.last_anomaly_time:
            time_since_anomaly = time.time() - self.last_anomaly_time
            cooldown_period = 300  # 5 –º–∏–Ω—É—Ç cooldown
            
            if time_since_anomaly < cooldown_period:
                self.logger.warning(
                    f"üö® Trading blocked due to recent anomaly "
                    f"(cooldown: {cooldown_period - time_since_anomaly:.0f}s remaining)"
                )
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        volatility = self.get_market_volatility()
        max_volatility = 0.1  # 10% –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        
        if volatility > max_volatility:
            self.logger.warning(
                f"‚ö†Ô∏è High volatility detected: {volatility:.2%}, "
                f"trading may be risky"
            )
            return False
        
        return True
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ circuit breaker"""
        return {
            'anomalies_detected': self.anomalies_detected,
            'last_anomaly_time': self.last_anomaly_time,
            'current_volatility': self.get_market_volatility(),
            'can_trade': self.should_trade(),
            'price_history_size': len(self.price_history)
        }

class AdvancedCircuitBreaker:
    """üö® –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π circuit breaker —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ circuit breaker"""
        self.price_breaker = CircuitBreaker(max_price_move=0.05, time_window=60)
        self.volume_breaker = VolumeAnomalyDetector()
        self.correlation_breaker = CorrelationMonitor()
        self.logger = logging.getLogger('AdvancedCircuitBreaker')
        
        # –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.trading_enabled = True
        self.emergency_stop_active = False
        
    def check_market_conditions(self, 
                              current_price: float,
                              volume: float,
                              symbol: str,
                              correlation_data: Optional[Dict] = None) -> bool:
        """
        –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        
        Args:
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            volume: –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            correlation_data: –î–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
            
        Returns:
            True –µ—Å–ª–∏ –º–æ–∂–Ω–æ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å
        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω–æ–≤—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π
        if self.price_breaker.check_anomaly(current_price, symbol):
            self.trading_enabled = False
            self.emergency_stop_active = True
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–º–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π
        if self.volume_breaker.check_volume_anomaly(volume, symbol):
            self.logger.warning(f"‚ö†Ô∏è Volume anomaly detected for {symbol}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        if correlation_data and not self.correlation_breaker.check_correlation(correlation_data):
            self.logger.warning(f"‚ö†Ô∏è Correlation risk detected for {symbol}")
            return False
        
        # –û–±—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        return self.trading_enabled and not self.emergency_stop_active
    
    def emergency_stop(self):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        self.trading_enabled = False
        self.emergency_stop_active = True
        self.logger.critical("üö® EMERGENCY STOP ACTIVATED - ALL TRADING HALTED")
    
    def reset(self):
        """–°–±—Ä–æ—Å circuit breaker"""
        self.trading_enabled = True
        self.emergency_stop_active = False
        self.price_breaker = CircuitBreaker()
        self.volume_breaker = VolumeAnomalyDetector()
        self.correlation_breaker = CorrelationMonitor()
        self.logger.info("‚úÖ Circuit breaker reset")

class VolumeAnomalyDetector:
    """üîç –î–µ—Ç–µ–∫—Ç–æ—Ä –æ–±—ä–µ–º–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π"""
    
    def __init__(self, max_volume_spike: float = 5.0):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –æ–±—ä–µ–º–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π
        
        Args:
            max_volume_spike: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤—Å–ø–ª–µ—Å–∫ –æ–±—ä–µ–º–∞ (–≤ —Ä–∞–∑–∞—Ö)
        """
        self.max_volume_spike = max_volume_spike
        self.volume_history = deque(maxlen=100)
        self.logger = logging.getLogger('VolumeAnomalyDetector')
    
    def check_volume_anomaly(self, current_volume: float, symbol: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–º–Ω–æ–π –∞–Ω–æ–º–∞–ª–∏–∏"""
        self.volume_history.append(current_volume)
        
        if len(self.volume_history) < 20:
            return False
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º
        avg_volume = sum(self.volume_history) / len(self.volume_history)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–ø–ª–µ—Å–∫
        if current_volume > avg_volume * self.max_volume_spike:
            self.logger.warning(
                f"üìä Volume spike detected: {symbol}, "
                f"Current: {current_volume:.0f}, "
                f"Average: {avg_volume:.0f}, "
                f"Spike: {current_volume/avg_volume:.1f}x"
            )
            return True
        
        return False

class CorrelationMonitor:
    """üìä –ú–æ–Ω–∏—Ç–æ—Ä –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–∞–º–∏"""
    
    def __init__(self, max_correlation: float = 0.8):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        
        Args:
            max_correlation: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ–ø—É—Å—Ç–∏–º–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è
        """
        self.max_correlation = max_correlation
        self.logger = logging.getLogger('CorrelationMonitor')
    
    def check_correlation(self, correlation_data: Dict[str, float]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–∞–º–∏"""
        for asset1, correlations in correlation_data.items():
            for asset2, correlation in correlations.items():
                if asset1 != asset2 and abs(correlation) > self.max_correlation:
                    self.logger.warning(
                        f"üìä High correlation detected: "
                        f"{asset1} vs {asset2}: {correlation:.2f}"
                    )
                    return False
        
        return True

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ
advanced_circuit_breaker = AdvancedCircuitBreaker()

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ circuit breaker
    breaker = CircuitBreaker(max_price_move=0.1, time_window=10)
    
    print("Testing circuit breaker...")
    
    # –°–∏–º—É–ª—è—Ü–∏—è –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω
    for i in range(5):
        price = 100 + i * 0.01
        anomaly = breaker.check_anomaly(price, "BTCUSDT")
        print(f"Price: {price:.2f}, Anomaly: {anomaly}")
    
    # –°–∏–º—É–ª—è—Ü–∏—è —Ñ–ª–µ—à-–∫—Ä—ç—à–∞
    crash_price = 50  # 50% –ø–∞–¥–µ–Ω–∏–µ
    anomaly = breaker.check_anomaly(crash_price, "BTCUSDT")
    print(f"Crash Price: {crash_price:.2f}, Anomaly: {anomaly}")
    
    print("Circuit breaker test completed")
