#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üõ°Ô∏è SAFE Trade Executor 
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ä–¥–µ—Ä–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
"""

import logging
import os
from decimal import Decimal, ROUND_DOWN
from typing import Optional, Dict, Any
from enum import Enum
from tenacity import retry, stop_after_attempt, wait_exponential, retry_if_exception_type

class OrderType(Enum):
    LIMIT = "Limit"
    MARKET = "Market"

class OrderSide(Enum):
    BUY = "Buy"
    SELL = "Sell"

class OrderStatus(Enum):
    NEW = "New"
    PARTIALLY_FILLED = "PartiallyFilled"
    FILLED = "Filled"
    CANCELLED = "Cancelled"
    REJECTED = "Rejected"

class SafeBybitExecutor:
    """üõ°Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ä–¥–µ—Ä–æ–≤"""
    
    def __init__(self, api_key: str, api_secret: str, testnet: bool = True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        
        Args:
            api_key: Bybit API –∫–ª—é—á
            api_secret: Bybit API —Å–µ–∫—Ä–µ—Ç
            testnet: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Ç—å
        """
        self.api_key = api_key
        self.api_secret = api_secret
        self.testnet = testnet
        self.logger = self._setup_logger()
        
        # –°–æ–∑–¥–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç –ë–ï–ó –ø–µ—Ä–µ–¥–∞—á–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤ –ª–æ–≥–∏
        self._setup_client()
        
    def _setup_logger(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger = logging.getLogger('SafeExecutor')
        logger.setLevel(logging.INFO)
        
        # –ù–ï –õ–û–ì–ò–†–£–ï–ú —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        class SafeFormatter(logging.Formatter):
            def format(self, record):
                msg = super().format(record)
                # –£–¥–∞–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã –∏–∑ –ª–æ–≥–æ–≤
                sensitive_patterns = [
                    r'(api_key|api_secret|token|password)[=:]\s*\w+',
                    r'(ghp_|gho_)[a-zA-Z0-9]{36}',
                    r'Bearer\s+\w+',
                ]
                for pattern in sensitive_patterns:
                    msg = re.sub(pattern, r'\1=***REDACTED***', msg, flags=re.IGNORECASE)
                return msg
        
        handler = logging.StreamHandler()
        handler.setFormatter(SafeFormatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
        logger.addHandler(handler)
        
        return logger
        
    def _setup_client(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            from pybit.unified_trading import HTTP
            self.client = HTTP(
                api_key=self.api_key,
                api_secret=self.api_secret,
                testnet=self.testnet
            )
            self.logger.info("‚úÖ Bybit client initialized successfully")
        except Exception as e:
            self.logger.error(f"‚ùå Failed to initialize Bybit client: {e}")
            raise
            
    @retry(
        stop=stop_after_attempt(3),
        wait=wait_exponential(multiplier=2, min=2, max=30),
        retry=retry_if_exception_type(Exception)
    )
    def place_order_with_retry(self, 
                             symbol: str,
                             side: OrderSide,
                             order_type: OrderType,
                             quantity: str,
                             price: Optional[str] = None,
                             **params) -> Dict[str, Any]:
        """
        –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–≤—Ç–æ—Ä–∞–º–∏
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)
            side: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ (BUY/SELL)
            order_type: –¢–∏–ø –æ—Ä–¥–µ—Ä–∞ (LIMIT/MARKET)
            quantity: –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            price: –¶–µ–Ω–∞ (–¥–ª—è –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤)
            **params: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        """
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        self._validate_order_params(symbol, side, order_type, quantity, price)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ä–¥–µ—Ä–∞
        order_params = {
            'category': 'linear',
            'symbol': symbol,
            'side': side.value,
            'orderType': order_type.value,
            'qty': quantity,
            'clientOrderId': self._generate_client_order_id()
        }
        
        # –î–ª—è –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É
        if order_type == OrderType.LIMIT and price:
            order_params['price'] = price
            
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.logger.info(f"üìù Placing order: {order_type.value} {side.value} {quantity} {symbol}")
        if price:
            self.logger.info(f"üí∞ Price: {price}")
            
        try:
            # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
            result = self.client.place_order(**order_params)
            
            if result.get('retCode') == 0:
                order_id = result['result'].get('orderId')
                self.logger.info(f"‚úÖ Order placed successfully: {order_id}")
                return result
            else:
                error_msg = result.get('retMsg', 'Unknown error')
                self.logger.error(f"‚ùå Order placement failed: {error_msg}")
                raise Exception(f"Order placement failed: {error_msg}")
                
        except Exception as e:
            self.logger.error(f"‚ùå Error placing order: {e}")
            raise
            
    def _validate_order_params(self, symbol: str, side: OrderSide, 
                             order_type: OrderType, quantity: str, price: Optional[str]):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ä–¥–µ—Ä–∞"""
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–≤–æ–ª–∞
        if not symbol or len(symbol) < 4:
            raise ValueError("Invalid symbol")
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if side not in [OrderSide.BUY, OrderSide.SELL]:
            raise ValueError("Invalid order side")
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –æ—Ä–¥–µ—Ä–∞
        if order_type not in [OrderType.LIMIT, OrderType.MARKET]:
            raise ValueError("Invalid order type")
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        try:
            qty_decimal = Decimal(quantity)
            if qty_decimal <= 0:
                raise ValueError("Quantity must be positive")
        except Exception:
            raise ValueError("Invalid quantity format")
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã –¥–ª—è –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
        if order_type == OrderType.LIMIT:
            if not price:
                raise ValueError("Price required for limit orders")
            try:
                price_decimal = Decimal(price)
                if price_decimal <= 0:
                    raise ValueError("Price must be positive")
            except Exception:
                raise ValueError("Invalid price format")
                
    def _generate_client_order_id(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –æ—Ä–¥–µ—Ä–∞"""
        import uuid
        import time
        
        timestamp = int(time.time() * 1000)
        uuid_part = str(uuid.uuid4())[:8]
        return f"BTCBot_{timestamp}_{uuid_part}"
        
    def calculate_position_size(self, account_balance: float, risk_pct: float, 
                               stop_loss_distance: float) -> str:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ —Å Decimal
        
        Args:
            account_balance: –ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞
            risk_pct: –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.02 –¥–ª—è 2%)
            stop_loss_distance: –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
            
        Returns:
            –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
        """
        
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Decimal –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
            balance_decimal = Decimal(str(account_balance))
            risk_decimal = Decimal(str(risk_pct))
            stop_distance_decimal = Decimal(str(stop_loss_distance))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if balance_decimal <= 0:
                raise ValueError("Account balance must be positive")
            if risk_decimal <= 0 or risk_decimal > Decimal('0.1'):
                raise ValueError("Risk percentage must be between 0 and 10%")
            if stop_distance_decimal <= 0:
                raise ValueError("Stop loss distance must be positive")
                
            # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
            risk_amount = balance_decimal * risk_decimal
            position_size = risk_amount / stop_distance_decimal
            
            # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            position_size = position_size.quantize(Decimal('0.001'), rounding=ROUND_DOWN)
            
            result = str(position_size)
            self.logger.info(f"üí∞ Calculated position size: {result}")
            
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå Error calculating position size: {e}")
            raise
            
    def emergency_stop(self):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        self.logger.warning("üö® EMERGENCY STOP ACTIVATED!")
        
        try:
            # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
            cancel_result = self.client.cancel_all_orders(
                category='linear',
                settleCoin='USDT'
            )
            
            if cancel_result.get('retCode') == 0:
                cancelled_count = len(cancel_result['result'].get('list', []))
                self.logger.warning(f"üõë Cancelled {cancelled_count} pending orders")
            else:
                self.logger.error("‚ùå Failed to cancel some orders")
                
        except Exception as e:
            self.logger.error(f"‚ùå Emergency stop error: {e}")
            
        self.logger.warning("üö® Emergency stop completed")
