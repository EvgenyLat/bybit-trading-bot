#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîí SECURE Bybit Executor with Retry Logic
–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ä–¥–µ—Ä–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
"""

import asyncio
import logging
from decimal import Decimal, getcontext, ROUND_DOWN
from typing import Dict, Any, Optional, Tuple
from enum import Enum
import time

from pybit.unified_trading import HTTP
from tenacity import retry, stop_after_attempt, wait_exponential, retry_if_exception_type
import requests.exceptions

class OrderSide(Enum):
    """–°—Ç–æ—Ä–æ–Ω–∞ –æ—Ä–¥–µ—Ä–∞"""
    BUY = "Buy"
    SELL = "Sell"

class OrderType(Enum):
    """–¢–∏–ø –æ—Ä–¥–µ—Ä–∞"""
    MARKET = "Market"
    LIMIT = "Limit"

class OrderStatus(Enum):
    """–°—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞"""
    NEW = "New"
    FILLED = "Filled"
    CANCELED = "Canceled"
    REJECTED = "Rejected"

class SecureBybitExecutor:
    """üîí –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ä–¥–µ—Ä–æ–≤ Bybit"""
    
    def __init__(self, api_key: str, api_secret: str, testnet: bool = True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        
        Args:
            api_key: Bybit API –∫–ª—é—á
            api_secret: Bybit API —Å–µ–∫—Ä–µ—Ç  
            testnet: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç-—Å–µ—Ç—å
        """
        self.api_key = api_key
        self.api_secret = api_secret
        self.testnet = testnet
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è Decimal
        getcontext().prec = 12
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        self.client = self._create_client()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.logger = self._setup_logging()
        
        # –ö—ç—à –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–µ–π
        self.order_cache = {}
        
    def _create_client(self) -> HTTP:
        """–°–æ–∑–¥–∞–Ω–∏–µ Bybit –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            client = HTTP(
                api_key=self.api_key,
                api_secret=self.api_secret,
                testnet=self.testnet
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            self._test_connection(client)
            
            self.logger.info(f"‚úÖ Bybit –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω (testnet: {self.testnet})")
            return client
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            raise
            
    def _test_connection(self, client: HTTP):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∏—Ä–∂–µ–π"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –≤—ã–∑–æ–≤
            client.get_server_time()
            self.logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit: {e}")
            raise
            
    def _setup_logging(self) -> logging.Logger:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger = logging.getLogger(__name__)
        logger.setLevel(logging.INFO)
        
        # –ù–ï –ª–æ–≥–∏—Ä—É–µ–º —Å–µ–∫—Ä–µ—Ç—ã!
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        
        handler = logging.StreamHandler()
        handler.setFormatter(formatter)
        logger.addHandler(handler)
        
        return logger
        
    @retry(
        stop=stop_after_attempt(5),
        wait=wait_exponential(multiplier=1, min=1, max=60),
        retry=retry_if_exception_type((requests.exceptions.RequestException, ConnectionError))
    )
    def _safe_api_call(self, method_name: str, *args, **kwargs):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ API —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏"""
        try:
            method = getattr(self.client, method_name)
            return method(*args, **kwargs)
            
        except requests.exceptions.HTTPError as e:
            if e.response.status_code == 429:
                self.logger.warning("‚è≥ Rate limit hit, retrying...")
                raise  # Retry –º–µ—Ö–∞–Ω–∏–∑–º –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç
            elif e.response.status_code >= 500:
                self.logger.warning("üåê Server error, retrying...")
                raise  # Retry –º–µ—Ö–∞–Ω–∏–∑–º –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç
            else:
                self.logger.error(f"‚ùå HTTP error: {e}")
                raise
                
        except Exception as e:
            self.logger.error(f"‚ùå API call failed: {e}")
            raise
            
    def quantize_size(self, size: float, step: float = 0.001) -> Decimal:
        """
        –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –¥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —à–∞–≥–∞
        
        Args:
            size: –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            step: –®–∞–≥ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.001)
            
        Returns:
            Decimal –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        """
        try:
            size_d = Decimal(str(size))
            step_d = Decimal(str(step))
            
            # –û–∫—Ä—É–≥–ª—è–µ–º –≤–Ω–∏–∑ –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫—Ä–∞—Ç–Ω–æ–≥–æ —à–∞–≥–∞
            result = (size_d // step_d) * step_d
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º—É–º
            if result <= 0:
                result = step_d
                
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå Quantize error: {e}")
            raise
            
    def quantize_price(self, price: float, tick_size: float = 0.01) -> Decimal:
        """
        –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –¥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ç–∏–∫–∞
        
        Args:
            price: –ò—Å—Ö–æ–¥–Ω–∞—è —Ü–µ–Ω–∞
            tick_size: –†–∞–∑–º–µ—Ä —Ç–∏–∫–∞
            
        Returns:
            Decimal –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ü–µ–Ω—ã
        """
        try:
            price_d = Decimal(str(price))
            tick_d = Decimal(str(tick_size))
            
            # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Ç–∏–∫–∞
            result = round(price_d / tick_d) * tick_d
            
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå Price quantize error: {e}")
            raise
            
    def get_symbol_info(self, symbol: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–º–≤–æ–ª–µ"""
        try:
            response = self._safe_api_call('get_instruments_info', category='linear', symbol=symbol)
            
            if response['retCode'] != 0:
                raise ValueError(f"Symbol info error: {response['retMsg']}")
                
            instruments = response['result']['list']
            if not instruments:
                raise ValueError(f"Symbol {symbol} not found")
                
            return instruments[0]
            
        except Exception as e:
            self.logger.error(f"‚ùå Get symbol info failed: {e}")
            raise
            
    def validate_order_params(self, symbol: str, side: OrderSide, order_type: OrderType, 
                            qty: Decimal, price: Optional[Decimal] = None) -> Tuple[Decimal, Optional[Decimal]]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ä–¥–µ—Ä–∞
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            side: –°—Ç–æ—Ä–æ–Ω–∞ –æ—Ä–¥–µ—Ä–∞
            order_type: –¢–∏–ø –æ—Ä–¥–µ—Ä–∞
            qty: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            price: –¶–µ–Ω–∞ (–¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞)
            
        Returns:
            Tuple[–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π_qty, –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è_—Ü–µ–Ω–∞]
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é —Å–∏–º–≤–æ–ª–∞
            symbol_info = self.get_symbol_info(symbol)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            lot_size_filter = symbol_info['lotSizeFilter']
            price_filter = symbol_info['priceFilter']
            
            min_qty = Decimal(lot_size_filter['minOrderQty'])
            max_qty = Decimal(lot_size_filter['maxOrderQty'])
            qty_step = Decimal(lot_size_filter['qtyStep'])
            
            tick_size = Decimal(price_filter['tickSize'])
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–∞–∑–º–µ—Ä
            normalized_qty = self.quantize_size(float(qty), float(qty_step))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
            if normalized_qty < min_qty:
                raise ValueError(f"Quantity {normalized_qty} below minimum {min_qty}")
            if normalized_qty > max_qty:
                raise ValueError(f"Quantity {normalized_qty} above maximum {max_qty}")
                
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ü–µ–Ω—É –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
            normalized_price = None
            if price is not None:
                normalized_price = self.quantize_price(float(price), float(tick_size))
                
            self.logger.info(f"‚úÖ Order parameters validated: qty={normalized_qty}, price={normalized_price}")
            
            return normalized_qty, normalized_price
            
        except Exception as e:
            self.logger.error(f"‚ùå Order validation failed: {e}")
            raise
            
    def place_order(self, symbol: str, side: OrderSide, order_type: OrderType, 
                   qty: float, price: Optional[float] = None, 
                   client_order_id: Optional[str] = None) -> Dict[str, Any]:
        """
        –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —Å –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä 'BTCUSDT')
            side: –°—Ç–æ—Ä–æ–Ω–∞ –æ—Ä–¥–µ—Ä–∞
            order_type: –¢–∏–ø –æ—Ä–¥–µ—Ä–∞
            qty: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            price: –¶–µ–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞)
            client_order_id: ID –æ—Ä–¥–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞ (–¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–µ–π)
            
        Returns:
            –û—Ç–≤–µ—Ç –±–∏—Ä–∂–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ä–¥–µ—Ä–µ
        """
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
            if not client_order_id:
                client_order_id = f"bot_{int(time.time() * 1000)}"
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
            if client_order_id in self.order_cache:
                raise ValueError(f"Order {client_order_id} already exists")
                
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            normalized_qty, normalized_price = self.validate_order_params(
                symbol, side, order_type, Decimal(str(qty)), 
                Decimal(str(price)) if price else None
            )
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
            order_data = {
                'symbol': symbol,
                'side': side.value,
                'orderType': order_type.value,
                'qty': str(normalized_qty),
                'timeInForce': 'GTC',
                'orderLinkId': client_order_id
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
            if order_type == OrderType.LIMIT and normalized_price:
                order_data['price'] = str(normalized_price)
                
            self.logger.info(f"üéØ Placing {order_type.value} {side.value} order: {normalized_qty} {symbol} @ {normalized_price}")
            
            # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä
            response = self._safe_api_call('place_order', category='linear', **order_data)
            
            if response['retCode'] != 0:
                raise APIError(f"Order placement failed: {response['retMsg']}")
                
            # –ö—ç—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ä–¥–µ—Ä
            self.order_cache[client_order_id] = {
                'symbol': symbol,
                'side': side,
                'qty': normalized_qty,
                'price': normalized_price,
                'timestamp': time.time()
            }
            
            self.logger.info(f"‚úÖ Order {client_order_id} placed successfully: {response['result']}")
            
            return response['result']
            
        except Exception as e:
            self.logger.error(f"‚ùå Place order failed: {e}")
            raise
            
    def cancel_order(self, symbol: str, order_id: Optional[str] = None, 
                   client_order_id: Optional[str] = None) -> Dict[str, Any]:
        """
        –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            order_id: ID –æ—Ä–¥–µ—Ä–∞ –æ—Ç –±–∏—Ä–∂–∏
            client_order_id: ID –æ—Ä–¥–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–º–µ–Ω—ã
        """
        try:
            if not order_id and not client_order_id:
                raise ValueError("Either order_id or client_order_id required")
                
            cancel_data = {
                'category': 'linear',
                'symbol': symbol
            }
            
            if order_id:
                cancel_data['orderId'] = order_id
            if client_order_id:
                cancel_data['orderLinkId'] = client_order_id
                
            response = self._safe_api_call('cancel_order', **cancel_data)
            
            if response['retCode'] != 0:
                raise APIError(f"Order cancellation failed: {response['retMsg']}")
                
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞
            if client_order_id and client_order_id in self.order_cache:
                del self.order_cache[client_order_id]
                
            self.logger.info(f"‚úÖ Order canceled: {order_id or client_order_id}")
            
            return response['result']
            
        except Exception as e:
            self.logger.error(f"‚ùå Cancel order failed: {e}")
            raise
            
    def get_account_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ"""
        try:
            response = self._safe_api_call('get_wallet_balance', accountType='UNIFIED')
            
            if response['retCode'] != 0:
                raise APIError(f"Account info failed: {response['retMsg']}")
                
            return response['result']
            
        except Exception as e:
            self.logger.error(f"‚ùå Get account info failed: {e}")
            raise


class APIError(Exception):
    """–ö–∞—Å—Ç–æ–º–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è API –æ—à–∏–±–æ–∫"""
    pass


if __name__ == "__main__":
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    
    print("üß™ Testing Secure Executor...")
    
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (—Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏—Ö –∫–ª—é—á–µ–π)
    try:
        # executor = SecureBybitExecutor(
        #     api_key="test_key",
        #     api_secret="test_secret", 
        #     testnet=True
        # )
        
        print("‚úÖ SecureExecutor –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print("üîí –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –±–µ–∑–æ–ø–∞—Å–Ω–æ")
        print("üîÑ Retry –ª–æ–≥–∏–∫–∞ –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–±–æ–µ–≤")
        print("üìä Decimal precision –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫–∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è")
        
    except Exception as e:
        print(f"‚ùå Test failed: {e}")
