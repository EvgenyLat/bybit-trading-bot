#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîí Thread-Safe Enhanced Executor
–ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π —É–ª—É—á—à–µ–Ω–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ä–¥–µ—Ä–æ–≤
"""

import time
import uuid
import threading
import logging
from decimal import Decimal, ROUND_DOWN, getcontext
from typing import Dict, Any, Optional, List
from enum import Enum
from collections import defaultdict

from tenacity import (
    retry, 
    stop_after_attempt, 
    wait_exponential, 
    retry_if_exception_type,
    before_sleep_log
)
import requests
from pybit.unified_trading import HTTP

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
from src.rate_limiter import bybit_rate_limiter
from src.circuit_breaker import advanced_circuit_breaker

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
getcontext().prec = 28

class OrderSide(Enum):
    BUY = "Buy"
    SELL = "Sell"

class OrderType(Enum):
    MARKET = "Market"
    LIMIT = "Limit"
    STOP = "Stop"
    STOP_LIMIT = "StopLimit"

class OrderStatus(Enum):
    NEW = "New"
    PARTIALLY_FILLED = "PartiallyFilled"
    FILLED = "Filled"
    CANCELED = "Canceled"
    REJECTED = "Rejected"

class ThreadSafeExecutor:
    """üîí –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ä–¥–µ—Ä–æ–≤ Bybit"""
    
    def __init__(self, api_key: str, api_secret: str, testnet: bool = True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        
        Args:
            api_key: Bybit API –∫–ª—é—á
            api_secret: Bybit API —Å–µ–∫—Ä–µ—Ç  
            testnet: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç-—Å–µ—Ç—å
        """
        self.api_key = api_key
        self.api_secret = api_secret
        self.testnet = testnet
        
        # –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        self._lock = threading.RLock()  # Reentrant lock –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        self._order_lock = threading.Lock()  # –û—Ç–¥–µ–ª—å–Ω—ã–π lock –¥–ª—è –æ—Ä–¥–µ—Ä–æ–≤
        self._position_lock = threading.Lock()  # Lock –¥–ª—è –ø–æ–∑–∏—Ü–∏–π
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.logger = self._setup_logging()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        self.client = self._create_client()
        
        # –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫—ç—à–∏ –∏ —Å—á–µ—Ç—á–∏–∫–∏
        self.order_cache = {}
        self.order_counter = 0
        self.position_cache = defaultdict(dict)
        
        # Circuit breaker —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.circuit_breaker_active = False
        self.circuit_breaker_failures = 0
        self.circuit_breaker_threshold = 5
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è)
        self.stats = {
            'orders_placed': 0,
            'orders_filled': 0,
            'orders_canceled': 0,
            'total_volume': Decimal('0'),
            'errors': 0
        }
        
    def _setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger = logging.getLogger('ThreadSafeExecutor')
        logger.setLevel(logging.INFO)
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä (—Å–∫—Ä—ã–≤–∞–µ—Ç —Å–µ–∫—Ä–µ—Ç—ã)
        class SafeFormatter(logging.Formatter):
            def format(self, record):
                msg = super().format(record)
                # –£–¥–∞–ª—è–µ–º —Å–µ–∫—Ä–µ—Ç—ã –∏–∑ –ª–æ–≥–æ–≤
                sensitive_patterns = [
                    r'(api_key|api_secret|token|password)[=:]\s*\w+',
                    r'(ghp_|gho_)[a-zA-Z0-9]{36}',
                    r'Bearer\s+\w+',
                ]
                import re
                for pattern in sensitive_patterns:
                    msg = re.sub(pattern, r'\1=***REDACTED***', msg, flags=re.IGNORECASE)
                return msg
        
        handler = logging.StreamHandler()
        handler.setFormatter(SafeFormatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
        logger.addHandler(handler)
        
        return logger
        
    def _create_client(self) -> HTTP:
        """–°–æ–∑–¥–∞–Ω–∏–µ Bybit –∫–ª–∏–µ–Ω—Ç–∞ —Å retry –ª–æ–≥–∏–∫–æ–π"""
        try:
            client = HTTP(
                api_key=self.api_key,
                api_secret=self.api_secret,
                testnet=self.testnet
            )
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            self._test_connection(client)
            
            self.logger.info(f"‚úÖ Bybit –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω (testnet: {self.testnet})")
            return client
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            raise
    
    @retry(
        stop=stop_after_attempt(3),
        wait=wait_exponential(multiplier=1, min=1, max=10),
        retry=retry_if_exception_type((requests.exceptions.RequestException, Exception)),
        before_sleep=before_sleep_log(logging.getLogger('ThreadSafeExecutor'), logging.WARNING)
    )
    def _test_connection(self, client: HTTP):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            response = client.get_server_time()
            if response.get('retCode') == 0:
                self.logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit —É—Å–ø–µ—à–Ω–æ")
            else:
                raise Exception(f"Bybit API error: {response}")
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            raise
    
    def _generate_client_order_id(self, strategy_name: str = "default") -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ client_order_id –¥–ª—è –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏"""
        with self._order_lock:
            timestamp = int(time.time())
            unique_id = str(uuid.uuid4().hex[:8])
            return f"bot-{strategy_name}-{timestamp}-{unique_id}"
    
    def _quantize_price(self, price: Decimal, tick_size: Decimal = Decimal('0.01')) -> Decimal:
        """–ö–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ–¥ tick size –±–∏—Ä–∂–∏"""
        if price <= 0:
            raise ValueError("Price must be positive")
        
        # –û–∫—Ä—É–≥–ª—è–µ–º –≤–Ω–∏–∑ –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ tick
        quantized = (price // tick_size) * tick_size
        return quantized.quantize(tick_size, rounding=ROUND_DOWN)
    
    def _quantize_quantity(self, quantity: Decimal, lot_size: Decimal = Decimal('0.001')) -> Decimal:
        """–ö–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥ lot size –±–∏—Ä–∂–∏"""
        if quantity <= 0:
            raise ValueError("Quantity must be positive")
        
        # –û–∫—Ä—É–≥–ª—è–µ–º –≤–Ω–∏–∑ –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ lot
        quantized = (quantity // lot_size) * lot_size
        return quantized.quantize(lot_size, rounding=ROUND_DOWN)
    
    def _check_circuit_breaker(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ circuit breaker"""
        with self._lock:
            if self.circuit_breaker_active:
                raise Exception("üö® Circuit breaker active - trading suspended")
    
    def _update_circuit_breaker(self, success: bool):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è circuit breaker"""
        with self._lock:
            if success:
                self.circuit_breaker_failures = 0
                self.circuit_breaker_active = False
            else:
                self.circuit_breaker_failures += 1
                if self.circuit_breaker_failures >= self.circuit_breaker_threshold:
                    self.circuit_breaker_active = True
                    self.logger.error("üö® Circuit breaker activated - too many failures")
    
    def _update_stats(self, stat_name: str, value: Any = 1):
        """–ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        with self._lock:
            if stat_name in self.stats:
                if isinstance(self.stats[stat_name], Decimal):
                    self.stats[stat_name] += Decimal(str(value))
                else:
                    self.stats[stat_name] += value
    
    @bybit_rate_limiter.order_call
    @retry(
        stop=stop_after_attempt(5),
        wait=wait_exponential(multiplier=1, min=2, max=30),
        retry=retry_if_exception_type((requests.exceptions.RequestException, Exception)),
        before_sleep=before_sleep_log(logging.getLogger('ThreadSafeExecutor'), logging.WARNING)
    )
    def place_order_with_retry(self, 
                             symbol: str,
                             side: OrderSide,
                             order_type: OrderType,
                             quantity: Decimal,
                             price: Optional[Decimal] = None,
                             strategy_name: str = "default",
                             **kwargs) -> Dict[str, Any]:
        """
        –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —Å retry –ª–æ–≥–∏–∫–æ–π –∏ –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å—é
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            side: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (Buy/Sell)
            order_type: –¢–∏–ø –æ—Ä–¥–µ—Ä–∞
            quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (Decimal)
            price: –¶–µ–Ω–∞ (–¥–ª—è Limit –æ—Ä–¥–µ—Ä–æ–≤)
            strategy_name: –ò–º—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º circuit breaker
        self._check_circuit_breaker()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
        if not advanced_circuit_breaker.should_trade():
            raise Exception("üö® Market conditions unsafe - trading halted")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π client_order_id
        client_order_id = self._generate_client_order_id(strategy_name)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –Ω–∞ –¥—É–±–ª–∏ (–ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ)
        with self._order_lock:
            if client_order_id in self.order_cache:
                self.logger.warning(f"‚ö†Ô∏è –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π client_order_id: {client_order_id}")
                return self.order_cache[client_order_id]
        
        try:
            # –ö–≤–∞–Ω—Ç—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            quantity = self._quantize_quantity(quantity)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞
            order_params = {
                'symbol': symbol,
                'side': side.value,
                'orderType': order_type.value,
                'qty': str(quantity),
                'clientOrderId': client_order_id,
                'timeInForce': kwargs.get('time_in_force', 'GTC')
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –¥–ª—è Limit –æ—Ä–¥–µ—Ä–æ–≤
            if order_type == OrderType.LIMIT and price:
                price = self._quantize_price(price)
                order_params['price'] = str(price)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            order_params.update(kwargs)
            
            self.logger.info(f"üì§ –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞: {symbol} {side.value} {quantity} @ {price or 'Market'}")
            
            # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä
            response = self.client.place_order(**order_params)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if response.get('retCode') == 0:
                order_id = response.get('result', {}).get('orderId')
                self.logger.info(f"‚úÖ –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: {order_id}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à (–ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ)
                with self._order_lock:
                    self.order_cache[client_order_id] = response
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self._update_stats('orders_placed')
                self._update_stats('total_volume', quantity)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º circuit breaker
                self._update_circuit_breaker(True)
                
                return response
            else:
                error_msg = f"Bybit API error: {response.get('retMsg', 'Unknown error')}"
                self.logger.error(f"‚ùå {error_msg}")
                raise Exception(error_msg)
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫
            self._update_stats('errors')
            
            # –û–±–Ω–æ–≤–ª—è–µ–º circuit breaker
            self._update_circuit_breaker(False)
            
            raise
    
    @bybit_rate_limiter.rest_api_call
    @retry(
        stop=stop_after_attempt(3),
        wait=wait_exponential(multiplier=1, min=1, max=10),
        retry=retry_if_exception_type((requests.exceptions.RequestException, Exception))
    )
    def get_account_balance(self, account_type: str = "UNIFIED") -> Decimal:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            response = self.client.get_wallet_balance(accountType=account_type)
            
            if response.get('retCode') == 0:
                balance_data = response.get('result', {}).get('list', [{}])[0]
                coin_data = balance_data.get('coin', [{}])[0]
                balance = Decimal(coin_data.get('walletBalance', '0'))
                
                self.logger.debug(f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance}")
                return balance
            else:
                raise Exception(f"Error getting balance: {response.get('retMsg')}")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            raise
    
    @bybit_rate_limiter.order_call
    @retry(
        stop=stop_after_attempt(3),
        wait=wait_exponential(multiplier=1, min=1, max=10),
        retry=retry_if_exception_type((requests.exceptions.RequestException, Exception))
    )
    def cancel_order(self, symbol: str, order_id: str) -> Dict[str, Any]:
        """–û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞"""
        try:
            response = self.client.cancel_order(symbol=symbol, orderId=order_id)
            
            if response.get('retCode') == 0:
                self.logger.info(f"‚úÖ –û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω: {order_id}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self._update_stats('orders_canceled')
                
                return response
            else:
                raise Exception(f"Error canceling order: {response.get('retMsg')}")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞: {e}")
            raise
    
    @bybit_rate_limiter.rest_api_call
    @retry(
        stop=stop_after_attempt(3),
        wait=wait_exponential(multiplier=1, min=1, max=10),
        retry=retry_if_exception_type((requests.exceptions.RequestException, Exception))
    )
    def get_positions(self, symbol: Optional[str] = None) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        try:
            params = {}
            if symbol:
                params['symbol'] = symbol
                
            response = self.client.get_positions(**params)
            
            if response.get('retCode') == 0:
                positions = response.get('result', {}).get('list', [])
                self.logger.debug(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {len(positions)}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–æ–∑–∏—Ü–∏–π (–ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ)
                with self._position_lock:
                    for position in positions:
                        pos_symbol = position.get('symbol')
                        if pos_symbol:
                            self.position_cache[pos_symbol] = position
                
                return positions
            else:
                raise Exception(f"Error getting positions: {response.get('retMsg')}")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
            raise
    
    def emergency_stop(self):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ - –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π"""
        self.logger.critical("üö® EMERGENCY STOP ACTIVATED")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
            positions = self.get_positions()
            
            for position in positions:
                symbol = position.get('symbol')
                size = Decimal(position.get('size', '0'))
                
                if size > 0:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è
                    side = OrderSide.SELL if position.get('side') == 'Buy' else OrderSide.BUY
                    
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                    self.place_order_with_retry(
                        symbol=symbol,
                        side=side,
                        order_type=OrderType.MARKET,
                        quantity=size,
                        strategy_name="emergency_stop"
                    )
                    
                    self.logger.info(f"üö® –ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è: {symbol} {size}")
            
            self.logger.critical("üö® EMERGENCY STOP COMPLETED")
            
        except Exception as e:
            self.logger.critical(f"üö® EMERGENCY STOP FAILED: {e}")
            raise
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ)"""
        with self._lock:
            return self.stats.copy()
    
    def get_rate_limiter_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ rate limiter"""
        return bybit_rate_limiter.get_status()
    
    def get_circuit_breaker_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ circuit breaker"""
        return advanced_circuit_breaker.get_status()

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∫–ª—é—á–∞–º–∏)
    executor = ThreadSafeExecutor(
        api_key="test_key",
        api_secret="test_secret",
        testnet=True
    )
    
    print("‚úÖ Thread-Safe Executor –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {executor.get_stats()}")
    print(f"üõ°Ô∏è Rate Limiter: {executor.get_rate_limiter_status()}")
    print(f"üö® Circuit Breaker: {executor.get_circuit_breaker_status()}")
