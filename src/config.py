#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîí SECURE Configuration Loader
–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–µ–∫—Ä–µ—Ç–æ–≤
"""

import os
import sys
from pathlib import Path
from typing import Dict, Any, Optional
from dotenv import load_dotenv
import yaml
import logging

class SecureConfig:
    """üîí –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–µ–∑ —ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤"""
    
    def __init__(self, env_file: str = '.env', config_file: str = 'config/config.yaml'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        
        Args:
            env_file: –ü—É—Ç—å –∫ .env —Ñ–∞–π–ª—É
            config_file: –ü—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∫–æ–Ω—Ñ–∏–≥—É
        """
        self.env_path = Path(env_file)
        self.config_path = Path(config_file)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        self._validate_files()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self._load_env()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç—ã
        self._validate_secrets()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥
        self._load_config()
        
    def _validate_files(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤"""
        if not self.env_path.exists():
            raise RuntimeError(f"‚ùå {self.env_path} –Ω–µ –Ω–∞–π–¥–µ–Ω - abort!")

        if not self.config_path.exists():
            raise RuntimeError(f"‚ùå {self.config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω - abort!")
            
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
        
    def _load_env(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –æ –∫–æ–º–º–∏—Ç–µ .env
        self._check_env_security()
        
        load_dotenv(dotenv_path=self.env_path)
        print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        
    def _check_env_security(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ .env —Ñ–∞–π–ª–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ .env –Ω–µ –≤ git (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ .gitignore)
        env_content = self.env_path.read_text()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –∫–ª—é—á–µ–π (–Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–º–∏)
        test_patterns = [
            '–≤–∞—à_api_–∫–ª—é—á',
            'test_key',
            'example_key'
        ]
        
        for pattern in test_patterns:
            if pattern in env_content.lower():
                raise RuntimeError(
                    f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ .env: {pattern}\n"
                    f"–ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–µ API –∫–ª—é—á–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º!"
                )
                
        print("üîí .env —Ñ–∞–π–ª –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        
    def _validate_secrets(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤"""
        required_secrets = [
            'BYBIT_API_KEY',
            'BYBIT_API_SECRET'
        ]
        
        missing_secrets = []
        
        for secret in required_secrets:
            value = os.getenv(secret)
            if not value or value.strip() == '':
                missing_secrets.append(secret)
                
        if missing_secrets:
            raise RuntimeError(
                f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:\n"
                f"{chr(10).join(f'  - {s}' for s in missing_secrets)}\n"
                f"–î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ —Ñ–∞–π–ª .env!"
            )
            
        print("‚úÖ –í—Å–µ —Å–µ–∫—Ä–µ—Ç—ã –Ω–∞–π–¥–µ–Ω—ã")
        
    def _load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞"""
        with open(self.config_path, 'r', encoding='utf-8') as f:
            self.config = yaml.safe_load(f)
            
        print("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥ –∑–∞–≥—Ä—É–∂–µ–Ω")
        
    def get_env_var(self, key: str, default: Optional[str] = None) -> str:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        value = os.getenv(key, default)
        if not value:
            raise RuntimeError(f"‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {key} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        return value
        
    def get_config(self, path: str, default: Any = None) -> Any:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –ø—É—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä 'trading.symbol')"""
        keys = path.split('.')
        value = self.config
        
        for key in keys:
            if isinstance(value, dict) and key in value:
                value = value[key]
            else:
                return default
                
        return value
        
    @property
    def bybit_api_key(self) -> str:
        """üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∏—Ç—å Bybit API –∫–ª—é—á"""
        return self.get_env_var('BYBIT_API_KEY')
        
    @property 
    def bybit_api_secret(self) -> str:
        """üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∏—Ç—å Bybit API —Å–µ–∫—Ä–µ—Ç"""
        return self.get_env_var('BYBIT_API_SECRET')
        
    @property
    def bybit_testnet(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç-—Å–µ—Ç–∏"""
        testnet = self.get_env_var('BYBIT_TESTNET', 'true').lower()
        return testnet == 'true'
        
    @property
    def telegram_enabled(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω–Ω–æ—Å—Ç–∏ Telegram"""
        token = os.getenv('TELEGRAM_BOT_TOKEN')
        chat_id = os.getenv('TELEGRAM_CHAT_ID')
        return bool(token) and bool(chat_id) and token != '–≤–∞—à_—Ç–æ–∫–µ–Ω_–æ—Ç_botfather'
        
    def log_security_warnings(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        warnings = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ testnet
        if not self.bybit_testnet:
            warnings.append("üî¥ –¢–û–†–ì–û–í–õ–Ø –í –†–ï–ê–õ–¨–ù–û–ô –°–ï–¢–ò!")
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram
        if not self.telegram_enabled:
            warnings.append("‚ö†Ô∏è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
        master_pass = os.getenv('MASTER_PASSWORD')
        if not master_pass or len(master_pass) < 12:
            warnings.append("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ–π MASTER_PASSWORD")
            
        if warnings:
            print("\nüö® –°–ò–°–¢–ï–ú–ù–´–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
            for warning in warnings:
                print(f"   {warning}")
            print()
        else:
            print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")


# Singleton instance
_config: Optional[SecureConfig] = None

def get_config() -> SecureConfig:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    global _config
    if _config is None:
        _config = SecureConfig()
    return _config


if __name__ == "__main__":
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        config = SecureConfig()
        config.log_security_warnings()
        
        print("\nüìä –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
        print(f"üí∞ –°–∏–º–≤–æ–ª —Ç–æ—Ä–≥–æ–≤–ª–∏: {config.get_config('trading.symbol', 'N/A')}")
        print(f"üß™ Testnet –≤–∫–ª—é—á–µ–Ω: {config.bybit_testnet}")
        print(f"üì± Telegram –≤–∫–ª—é—á–µ–Ω: {config.telegram_enabled}")
        
        print("\n‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        sys.exit(1)
