#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üìà Trailing Stop Loss System
–°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏
"""

import time
import logging
from typing import Optional, Dict, Any
from decimal import Decimal
from enum import Enum

class TrailingStopType(Enum):
    PERCENTAGE = "percentage"
    ATR = "atr"
    FIXED = "fixed"

class TrailingStop:
    """üìà Trailing stop loss –¥–ª—è –∑–∞—â–∏—Ç—ã –ø—Ä–∏–±—ã–ª–∏"""
    
    def __init__(self, 
                 activation_pct: float = 0.01,  # 1% –ø—Ä–∏–±—ã–ª—å –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                 trail_pct: float = 0.005,      # 0.5% —Ç—Ä–µ–π–ª–∏–Ω–≥
                 trail_type: TrailingStopType = TrailingStopType.PERCENTAGE,
                 max_trail_distance: float = 0.05):  # 5% –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è trailing stop
        
        Args:
            activation_pct: –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞
            trail_pct: –ü—Ä–æ—Ü–µ–Ω—Ç —Ç—Ä–µ–π–ª–∏–Ω–≥–∞
            trail_type: –¢–∏–ø —Ç—Ä–µ–π–ª–∏–Ω–≥–∞ (percentage, atr, fixed)
            max_trail_distance: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞
        """
        self.activation_pct = activation_pct
        self.trail_pct = trail_pct
        self.trail_type = trail_type
        self.max_trail_distance = max_trail_distance
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.highest_price = None
        self.lowest_price = None
        self.activated = False
        self.entry_price = None
        self.current_stop_price = None
        
        self.logger = logging.getLogger('TrailingStop')
    
    def initialize(self, entry_price: Decimal, side: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è trailing stop
        
        Args:
            entry_price: –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞
            side: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ ('buy' –∏–ª–∏ 'sell')
        """
        self.entry_price = entry_price
        self.side = side
        self.activated = False
        self.highest_price = None
        self.lowest_price = None
        self.current_stop_price = None
        
        self.logger.info(f"üìà Trailing stop initialized: {side} @ {entry_price}")
    
    def update(self, current_price: Decimal, atr: Optional[Decimal] = None) -> Optional[Decimal]:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç trailing stop
        
        Args:
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            atr: ATR –¥–ª—è ATR-based —Ç—Ä–µ–π–ª–∏–Ω–≥–∞
            
        Returns:
            –¶–µ–Ω—É —Å—Ç–æ–ø–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é, –∏–Ω–∞—á–µ None
        """
        if self.entry_price is None:
            self.logger.warning("‚ö†Ô∏è Trailing stop not initialized")
            return None
        
        if self.side == 'buy':
            return self._update_long_position(current_price, atr)
        else:
            return self._update_short_position(current_price, atr)
    
    def _update_long_position(self, current_price: Decimal, atr: Optional[Decimal] = None) -> Optional[Decimal]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –ª–æ–Ω–≥ –ø–æ–∑–∏—Ü–∏–∏"""
        profit_pct = (current_price - self.entry_price) / self.entry_price
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º trailing stop –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø—Ä–∏–±—ã–ª–∏
        if not self.activated and profit_pct >= self.activation_pct:
            self.activated = True
            self.highest_price = current_price
            self.logger.info(f"‚úÖ Trailing stop activated at {current_price} (profit: {profit_pct:.2%})")
        
        if self.activated:
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º
            if current_price > self.highest_price:
                self.highest_price = current_price
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–ø
            if self.trail_type == TrailingStopType.PERCENTAGE:
                stop_price = self.highest_price * (1 - self.trail_pct)
            elif self.trail_type == TrailingStopType.ATR and atr:
                stop_price = self.highest_price - (atr * Decimal('2'))
            else:  # FIXED
                stop_price = self.highest_price - Decimal(str(self.trail_pct))
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
            max_stop_distance = self.highest_price * self.max_trail_distance
            min_stop_price = self.highest_price - max_stop_distance
            stop_price = max(stop_price, min_stop_price)
            
            self.current_stop_price = stop_price
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ —Å—Ç–æ–ø–∞
            if current_price <= stop_price:
                self.logger.info(f"üõë Trailing stop hit: {current_price} <= {stop_price}")
                return stop_price
        
        return None
    
    def _update_short_position(self, current_price: Decimal, atr: Optional[Decimal] = None) -> Optional[Decimal]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è —à–æ—Ä—Ç –ø–æ–∑–∏—Ü–∏–∏"""
        profit_pct = (self.entry_price - current_price) / self.entry_price
        
        if not self.activated and profit_pct >= self.activation_pct:
            self.activated = True
            self.lowest_price = current_price
            self.logger.info(f"‚úÖ Trailing stop activated at {current_price} (profit: {profit_pct:.2%})")
        
        if self.activated:
            if current_price < self.lowest_price:
                self.lowest_price = current_price
            
            if self.trail_type == TrailingStopType.PERCENTAGE:
                stop_price = self.lowest_price * (1 + self.trail_pct)
            elif self.trail_type == TrailingStopType.ATR and atr:
                stop_price = self.lowest_price + (atr * Decimal('2'))
            else:  # FIXED
                stop_price = self.lowest_price + Decimal(str(self.trail_pct))
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
            max_stop_distance = self.lowest_price * self.max_trail_distance
            max_stop_price = self.lowest_price + max_stop_distance
            stop_price = min(stop_price, max_stop_price)
            
            self.current_stop_price = stop_price
            
            if current_price >= stop_price:
                self.logger.info(f"üõë Trailing stop hit: {current_price} >= {stop_price}")
                return stop_price
        
        return None
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ trailing stop"""
        return {
            'activated': self.activated,
            'entry_price': float(self.entry_price) if self.entry_price else None,
            'current_stop_price': float(self.current_stop_price) if self.current_stop_price else None,
            'highest_price': float(self.highest_price) if self.highest_price else None,
            'lowest_price': float(self.lowest_price) if self.lowest_price else None,
            'side': getattr(self, 'side', None),
            'trail_type': self.trail_type.value
        }

class AdaptiveTrailingStop(TrailingStop):
    """üìà –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π trailing stop —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    
    def __init__(self, 
                 base_activation_pct: float = 0.01,
                 base_trail_pct: float = 0.005,
                 volatility_multiplier: float = 1.5):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ trailing stop
        
        Args:
            base_activation_pct: –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            base_trail_pct: –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Ç—Ä–µ–π–ª–∏–Ω–≥–∞
            volatility_multiplier: –ú–Ω–æ–∂–∏—Ç–µ–ª—å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        """
        super().__init__(base_activation_pct, base_trail_pct)
        self.base_activation_pct = base_activation_pct
        self.base_trail_pct = base_trail_pct
        self.volatility_multiplier = volatility_multiplier
        self.current_volatility = None
    
    def update_volatility(self, volatility: float):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
        self.current_volatility = volatility
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        if volatility > 0.05:  # –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            self.activation_pct = self.base_activation_pct * 1.5
            self.trail_pct = self.base_trail_pct * 1.5
        elif volatility < 0.02:  # –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            self.activation_pct = self.base_activation_pct * 0.7
            self.trail_pct = self.base_trail_pct * 0.7
        else:  # –°—Ä–µ–¥–Ω—è—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            self.activation_pct = self.base_activation_pct
            self.trail_pct = self.base_trail_pct
        
        self.logger.debug(f"üìä Volatility updated: {volatility:.3f}, "
                         f"activation: {self.activation_pct:.3f}, "
                         f"trail: {self.trail_pct:.3f}")

class TrailingStopManager:
    """üìà –ú–µ–Ω–µ–¥–∂–µ—Ä –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö trailing stops"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        self.trailing_stops = {}
        self.logger = logging.getLogger('TrailingStopManager')
    
    def add_trailing_stop(self, 
                         position_id: str,
                         entry_price: Decimal,
                         side: str,
                         trail_type: TrailingStopType = TrailingStopType.PERCENTAGE,
                         **kwargs) -> TrailingStop:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ trailing stop –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏
        
        Args:
            position_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–∑–∏—Ü–∏–∏
            entry_price: –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞
            side: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            trail_type: –¢–∏–ø —Ç—Ä–µ–π–ª–∏–Ω–≥–∞
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            
        Returns:
            –°–æ–∑–¥–∞–Ω–Ω—ã–π trailing stop
        """
        if trail_type == TrailingStopType.ATR:
            trailing_stop = AdaptiveTrailingStop(**kwargs)
        else:
            trailing_stop = TrailingStop(trail_type=trail_type, **kwargs)
        
        trailing_stop.initialize(entry_price, side)
        self.trailing_stops[position_id] = trailing_stop
        
        self.logger.info(f"üìà Added trailing stop for position {position_id}")
        return trailing_stop
    
    def update_position(self, 
                       position_id: str, 
                       current_price: Decimal,
                       atr: Optional[Decimal] = None,
                       volatility: Optional[float] = None) -> Optional[Decimal]:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ trailing stop
        
        Args:
            position_id: ID –ø–æ–∑–∏—Ü–∏–∏
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            atr: ATR –¥–ª—è ATR-based —Ç—Ä–µ–π–ª–∏–Ω–≥–∞
            volatility: –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞
            
        Returns:
            –¶–µ–Ω—É —Å—Ç–æ–ø–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é
        """
        if position_id not in self.trailing_stops:
            return None
        
        trailing_stop = self.trailing_stops[position_id]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞
        if isinstance(trailing_stop, AdaptiveTrailingStop) and volatility:
            trailing_stop.update_volatility(volatility)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º trailing stop
        stop_price = trailing_stop.update(current_price, atr)
        
        if stop_price:
            self.logger.info(f"üõë Trailing stop triggered for position {position_id}")
            # –£–¥–∞–ª—è–µ–º trailing stop –ø–æ—Å–ª–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
            del self.trailing_stops[position_id]
        
        return stop_price
    
    def remove_trailing_stop(self, position_id: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ trailing stop"""
        if position_id in self.trailing_stops:
            del self.trailing_stops[position_id]
            self.logger.info(f"üìà Removed trailing stop for position {position_id}")
    
    def get_all_status(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö trailing stops"""
        return {
            position_id: trailing_stop.get_status()
            for position_id, trailing_stop in self.trailing_stops.items()
        }
    
    def get_active_count(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö trailing stops"""
        return len(self.trailing_stops)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ
trailing_stop_manager = TrailingStopManager()

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ trailing stop
    ts = TrailingStop(activation_pct=0.02, trail_pct=0.01)
    
    # –°–∏–º—É–ª—è—Ü–∏—è –ª–æ–Ω–≥ –ø–æ–∑–∏—Ü–∏–∏
    ts.initialize(Decimal('100'), 'buy')
    
    print("Testing trailing stop for long position...")
    
    # –°–∏–º—É–ª—è—Ü–∏—è —Ä–æ—Å—Ç–∞ —Ü–µ–Ω—ã
    prices = [100, 101, 102, 103, 104, 105, 104, 103, 102]
    
    for price in prices:
        stop_price = ts.update(Decimal(str(price)))
        status = ts.get_status()
        print(f"Price: {price}, Stop: {stop_price}, Status: {status['activated']}")
        
        if stop_price:
            print(f"üõë Stop triggered at {stop_price}")
            break
    
    print("Trailing stop test completed")
