#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß™ Comprehensive Test Suite
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
"""

import unittest
import sys
import os
from pathlib import Path
from decimal import Decimal
from unittest.mock import Mock, patch, MagicMock
import tempfile
import json

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ path –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, str(Path(__file__).parent.parent / 'src'))

class TestEnhancedSecureExecutor(unittest.TestCase):
    """–¢–µ—Å—Ç—ã —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
        self.executor = None  # –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ —Ç–µ—Å—Ç–∞—Ö —Å –º–æ–∫–∞–º–∏
    
    @patch('src.enhanced_secure_executor.HTTP')
    def test_executor_initialization(self, mock_http):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
        mock_client = Mock()
        mock_client.get_server_time.return_value = {'retCode': 0}
        mock_http.return_value = mock_client
        
        from src.enhanced_secure_executor import EnhancedSecureExecutor
        
        executor = EnhancedSecureExecutor(
            api_key="test_key",
            api_secret="test_secret",
            testnet=True
        )
        
        self.assertIsNotNone(executor)
        self.assertEqual(executor.testnet, True)
        self.assertFalse(executor.circuit_breaker_active)
    
    def test_decimal_precision(self):
        """–¢–µ—Å—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏ Decimal —Ä–∞—Å—á–µ—Ç–æ–≤"""
        from src.enhanced_secure_executor import EnhancedSecureExecutor
        
        # –°–æ–∑–¥–∞–µ–º executor –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        executor = EnhancedSecureExecutor.__new__(EnhancedSecureExecutor)
        executor.logger = Mock()
        
        # –¢–µ—Å—Ç –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã
        price = Decimal('123.456789')
        tick_size = Decimal('0.01')
        quantized = executor._quantize_price(price, tick_size)
        
        self.assertEqual(quantized, Decimal('123.45'))
        
        # –¢–µ—Å—Ç –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        quantity = Decimal('1.234567')
        lot_size = Decimal('0.001')
        quantized_qty = executor._quantize_quantity(quantity, lot_size)
        
        self.assertEqual(quantized_qty, Decimal('1.234'))
    
    def test_client_order_id_generation(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ client_order_id"""
        from src.enhanced_secure_executor import EnhancedSecureExecutor
        
        executor = EnhancedSecureExecutor.__new__(EnhancedSecureExecutor)
        executor.logger = Mock()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ ID
        id1 = executor._generate_client_order_id("test_strategy")
        id2 = executor._generate_client_order_id("test_strategy")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω–∏ —Ä–∞–∑–Ω—ã–µ
        self.assertNotEqual(id1, id2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
        self.assertTrue(id1.startswith("bot-test_strategy-"))
        self.assertTrue(len(id1) > 20)  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–º

class TestSafeHTTPClient(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ HTTP –∫–ª–∏–µ–Ω—Ç–∞"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
        from src.safe_http_client import SafeHTTPClient
        self.client = SafeHTTPClient(timeout=5)
    
    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤"""
        self.client.close()
    
    @patch('requests.Session.get')
    def test_safe_get_success(self, mock_get):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ GET –∑–∞–ø—Ä–æ—Å–∞"""
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.json.return_value = {'success': True}
        mock_response.raise_for_status.return_value = None
        mock_get.return_value = mock_response
        
        response = self.client.safe_get("https://api.example.com/test")
        
        self.assertEqual(response.status_code, 200)
        mock_get.assert_called_once()
    
    @patch('requests.Session.get')
    def test_safe_get_timeout(self, mock_get):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–π–º–∞—É—Ç–∞"""
        import requests
        mock_get.side_effect = requests.exceptions.Timeout()
        
        with self.assertRaises(requests.exceptions.Timeout):
            self.client.safe_get("https://api.example.com/test")

class TestDecimalCalculations(unittest.TestCase):
    """–¢–µ—Å—Ç—ã Decimal —Ä–∞—Å—á–µ—Ç–æ–≤"""
    
    def test_money_calculations(self):
        """–¢–µ—Å—Ç –¥–µ–Ω–µ–∂–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —Å Decimal"""
        # –¢–µ—Å—Ç —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
        balance = Decimal('1000.00')
        risk_pct = Decimal('0.02')  # 2%
        stop_distance = Decimal('50.00')
        
        risk_amount = balance * risk_pct
        position_size = risk_amount / stop_distance
        
        expected_position = Decimal('0.40')
        self.assertEqual(position_size, expected_position)
        
        # –¢–µ—Å—Ç —á—Ç–æ float –¥–∞–ª –±—ã –Ω–µ—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        balance_float = 1000.00
        risk_pct_float = 0.02
        stop_distance_float = 50.00
        
        position_size_float = (balance_float * risk_pct_float) / stop_distance_float
        
        # Decimal —Ç–æ—á–Ω–µ–µ —á–µ–º float
        self.assertNotEqual(float(position_size), position_size_float)
    
    def test_price_quantization(self):
        """–¢–µ—Å—Ç –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏—è —Ü–µ–Ω"""
        from decimal import Decimal, ROUND_DOWN
        
        def quantize_price(price: Decimal, tick_size: Decimal) -> Decimal:
            return (price // tick_size) * tick_size
        
        # –¢–µ—Å—Ç –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏—è
        price = Decimal('123.456789')
        tick_size = Decimal('0.01')
        quantized = quantize_price(price, tick_size)
        
        self.assertEqual(quantized, Decimal('123.45'))
        
        # –¢–µ—Å—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ tick sizes
        price = Decimal('100.123456')
        tick_size = Decimal('0.1')
        quantized = quantize_price(price, tick_size)
        
        self.assertEqual(quantized, Decimal('100.1'))

class TestSecurityFeatures(unittest.TestCase):
    """–¢–µ—Å—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    def test_secret_redaction(self):
        """–¢–µ—Å—Ç —Å–∫—Ä—ã—Ç–∏—è —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤ –ª–æ–≥–∞—Ö"""
        import re
        
        # –¢–µ—Å—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å–∫—Ä—ã—Ç–∏—è
        test_log = "api_key=secret123 token=abc456 password=xyz789"
        
        sensitive_patterns = [
            r'(api_key|api_secret|token|password)[=:]\s*\w+',
            r'(ghp_|gho_)[a-zA-Z0-9]{36}',
            r'Bearer\s+\w+',
        ]
        
        redacted_log = test_log
        for pattern in sensitive_patterns:
            redacted_log = re.sub(pattern, r'\1=***REDACTED***', redacted_log, flags=re.IGNORECASE)
        
        self.assertIn('***REDACTED***', redacted_log)
        self.assertNotIn('secret123', redacted_log)
        self.assertNotIn('abc456', redacted_log)
        self.assertNotIn('xyz789', redacted_log)
    
    def test_circuit_breaker_logic(self):
        """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ circuit breaker"""
        from src.enhanced_secure_executor import EnhancedSecureExecutor
        
        executor = EnhancedSecureExecutor.__new__(EnhancedSecureExecutor)
        executor.circuit_breaker_active = False
        executor.circuit_breaker_failures = 0
        executor.circuit_breaker_threshold = 3
        executor.logger = Mock()
        
        # –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        executor._update_circuit_breaker(True)
        self.assertFalse(executor.circuit_breaker_active)
        self.assertEqual(executor.circuit_breaker_failures, 0)
        
        # –¢–µ—Å—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫
        for _ in range(3):
            executor._update_circuit_breaker(False)
        
        self.assertTrue(executor.circuit_breaker_active)
        self.assertEqual(executor.circuit_breaker_failures, 3)

class TestConfigurationSecurity(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    
    def test_env_file_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ .env —Ñ–∞–π–ª–∞"""
        from src.config import SecureConfig
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π .env —Ñ–∞–π–ª —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        with tempfile.NamedTemporaryFile(mode='w', suffix='.env', delete=False) as f:
            f.write("BYBIT_API_KEY=–≤–∞—à_api_–∫–ª—é—á\n")
            f.write("BYBIT_API_SECRET=–≤–∞—à_se–∫—Ä–µ—Ç–Ω—ã–π_–∫–ª—é—á\n")
            temp_env = f.name
        
        try:
            # –î–æ–ª–∂–µ–Ω –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–∑-–∑–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            with self.assertRaises(RuntimeError):
                SecureConfig(env_file=temp_env)
        finally:
            os.unlink(temp_env)
    
    def test_missing_secrets_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤"""
        from src.config import SecureConfig
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π .env —Ñ–∞–π–ª –±–µ–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤
        with tempfile.NamedTemporaryFile(mode='w', suffix='.env', delete=False) as f:
            f.write("# Empty env file\n")
            temp_env = f.name
        
        try:
            # –î–æ–ª–∂–µ–Ω –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤
            with self.assertRaises(RuntimeError):
                SecureConfig(env_file=temp_env)
        finally:
            os.unlink(temp_env)

class TestIdempotency(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏"""
    
    def test_order_cache(self):
        """–¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤"""
        from src.enhanced_secure_executor import EnhancedSecureExecutor
        
        executor = EnhancedSecureExecutor.__new__(EnhancedSecureExecutor)
        executor.order_cache = {}
        executor.logger = Mock()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä –≤ –∫—ç—à
        test_order_id = "test-order-123"
        test_response = {'orderId': test_order_id, 'status': 'success'}
        
        executor.order_cache[test_order_id] = test_response
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ä–¥–µ—Ä –≤ –∫—ç—à–µ
        self.assertIn(test_order_id, executor.order_cache)
        self.assertEqual(executor.order_cache[test_order_id], test_response)
    
    def test_unique_order_ids(self):
        """–¢–µ—Å—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ order ID"""
        from src.enhanced_secure_executor import EnhancedSecureExecutor
        
        executor = EnhancedSecureExecutor.__new__(EnhancedSecureExecutor)
        executor.logger = Mock()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ ID
        ids = set()
        for _ in range(100):
            order_id = executor._generate_client_order_id("test")
            ids.add(order_id)
        
        # –í—Å–µ ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏
        self.assertEqual(len(ids), 100)

def run_comprehensive_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ Running Comprehensive Test Suite")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º test suite
    loader = unittest.TestLoader()
    suite = unittest.TestSuite()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã
    test_classes = [
        TestEnhancedSecureExecutor,
        TestSafeHTTPClient,
        TestDecimalCalculations,
        TestSecurityFeatures,
        TestConfigurationSecurity,
        TestIdempotency
    ]
    
    for test_class in test_classes:
        tests = loader.loadTestsFromTestCase(test_class)
        suite.addTests(tests)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 50)
    print("üìä TEST RESULTS:")
    print(f"‚úÖ Tests run: {result.testsRun}")
    print(f"‚ùå Failures: {len(result.failures)}")
    print(f"‚ö†Ô∏è Errors: {len(result.errors)}")
    
    if result.failures:
        print("\nüö® FAILURES:")
        for test, traceback in result.failures:
            print(f"  - {test}: {traceback}")
    
    if result.errors:
        print("\nüö® ERRORS:")
        for test, traceback in result.errors:
            print(f"  - {test}: {traceback}")
    
    if result.wasSuccessful():
        print("\nüéâ ALL TESTS PASSED!")
        return 0
    else:
        print("\n‚ùå SOME TESTS FAILED")
        return 1

if __name__ == "__main__":
    exit(run_comprehensive_tests())
