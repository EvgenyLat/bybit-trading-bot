#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß™ Basic Tests for CI/CD Pipeline
–ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è GitHub Actions
"""

import unittest
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ path –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, str(Path(__file__).parent.parent / 'src'))

class TestBasicFunctionality(unittest.TestCase):
    """–ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    
    def test_imports(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
            import pandas as pd
            import numpy as np
            import yaml
            print("‚úÖ Core libraries imported successfully")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏–∏
            self.assertIsNotNone(pd.__version__)
            self.assertIsNotNone(np.__version__)
            print(f"üìä Pandas: {pd.__version__}")
            print(f"üî¢ NumPy: {np.__version__}")
            
        except ImportError as e:
            self.fail(f"Failed to import core libraries: {e}")
    
    def test_decimal_precision(self):
        """–¢–µ—Å—Ç Decimal precision –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤"""
        from decimal import Decimal, ROUND_DOWN
        
        # –¢–µ—Å—Ç —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
        balance = Decimal('1000.00')
        risk_pct = Decimal('0.02')  # 2%
        stop_distance = Decimal('50.00')
        
        risk_amount = balance * risk_pct
        position_size = risk_amount / stop_distance
        
        expected_position = Decimal('0.40')
        self.assertEqual(position_size, expected_position)
        print("‚úÖ Decimal precision calculations working")
    
    def test_config_structure(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        config_path = Path('config/config.yaml')
        secrets_example = Path('config/secrets.env.example')
        
        self.assertTrue(config_path.exists(), "config.yaml should exist")
        self.assertTrue(secrets_example.exists(), "secrets.env.example should exist")
        print("‚úÖ Configuration files present")
    
    def test_security_files(self):
        """–¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è security —Ñ–∞–π–ª–æ–≤"""
        security_files = [
            '.gitignore',
            'SECURITY.md',
            'scripts/security_check.py',
            'internal_security_scan.py'
        ]
        
        for file_path in security_files:
            path = Path(file_path)
            self.assertTrue(path.exists(), f"{file_path} should exist")
        
        print("‚úÖ Security files present")
    
    def test_github_actions(self):
        """–¢–µ—Å—Ç GitHub Actions –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        workflow_path = Path('.github/workflows/security-and-tests.yml')
        self.assertTrue(workflow_path.exists(), "GitHub Actions workflow should exist")
        print("‚úÖ GitHub Actions configured")
    
    def test_requirements_files(self):
        """–¢–µ—Å—Ç —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        req_files = [
            'requirements-production.txt',
            'requirements-secure.txt'
        ]
        
        for req_file in req_files:
            path = Path(req_file)
            self.assertTrue(path.exists(), f"{req_file} should exist")
        
        print("‚úÖ Requirements files present")

class TestModuleImports(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞"""
    
    def test_config_module(self):
        """–¢–µ—Å—Ç –º–æ–¥—É–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥—É–ª—å –º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
            import src.config
            print("‚úÖ Config module imports successfully")
        except Exception as e:
            print(f"‚ö†Ô∏è Config module import issue: {e}")
            # –ù–µ –ø–∞–¥–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å .env —Ñ–∞–π–ª–∞
    
    def test_executor_modules(self):
        """–¢–µ—Å—Ç –º–æ–¥—É–ª–µ–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
        try:
            import src.secure_executor
            print("‚úÖ Secure executor module imports successfully")
        except Exception as e:
            print(f"‚ö†Ô∏è Secure executor import issue: {e}")
        
        try:
            import src.safe_executor
            print("‚úÖ Safe executor module imports successfully")
        except Exception as e:
            print(f"‚ö†Ô∏è Safe executor import issue: {e}")

def run_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ Running Basic Tests for CI/CD Pipeline")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º test suite
    loader = unittest.TestLoader()
    suite = unittest.TestSuite()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã
    suite.addTests(loader.loadTestsFromTestCase(TestBasicFunctionality))
    suite.addTests(loader.loadTestsFromTestCase(TestModuleImports))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    return 0 if result.wasSuccessful() else 1

if __name__ == "__main__":
    exit(run_tests())
