#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîí COMPREHENSIVE Security Check Script
–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
"""

import os
import sys
import subprocess
import re
from pathlib import Path
from typing import List, Dict, Any, Tuple

class SecurityChecker:
    """üîí –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        self.base_dir = Path.cwd()
        self.issues = []
        self.critical_issues = []
        
    def check_git_secrets(self) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤ git –∏—Å—Ç–æ—Ä–∏–∏"""
        print("üîç Checking Git history for secrets...")
        
        secrets_patterns = [
            r'API_KEY\s*=\s*["\']([^"\']{,50})["\']',
            r'API_SECRET\s*=\s*["\']([^"\']{,50})["\']',
            r'BYBIT_API_KEY\s*=\s*["\']([^"\']{,50})["\']',
            r'BYBIT_API_SECRET\s*=\s*["\']([^"\']{,50})["\']',
            r'bot_token\s*=\s*["\']([^"\']{,50})["\']',
            r'private_key\s*=\s*["\']([^"\']{,50})["\']',
            r'ghp_[a-zA-Z0-9]{36}',  # GitHub personal access tokens
            r'gho_[a-zA-Z0-9]{36}',  # GitHub OAuth tokens
        ]
        
        issues = []
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∞–π–ª—ã
            for pattern in secrets_patterns:
                result = subprocess.run(
                    ['git', 'grep', '-n', '-i', pattern],
                    capture_output=True,
                    text=True,
                    cwd=self.base_dir
                )
                
                if result.stdout:
                    matches = result.stdout.strip().split('\n')
                    for match in matches:
                        # –ò—Å–∫–ª—é—á–∞–µ–º example —Ñ–∞–π–ª—ã
                        if 'example' not in match.lower() and 'test' not in match.lower():
                            issues.append(f"‚ö†Ô∏è Potential secret in: {match}")
                            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å git (staged files)
            result = subprocess.run(
                ['git', 'diff', '--cached'],
                capture_output=True,
                text=True
            )
            
            if result.stdout:
                for pattern in secrets_patterns:
                    matches = re.findall(pattern, result.stdout)
                    if matches:
                        issues.append(f"üö® CRITICAL: Secret in staged files: {pattern}")
                            
        except Exception as e:
            issues.append(f"‚ùå Error checking secrets: {e}")
            
        return issues
        
    def check_env_file(self) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ .env"""
        print("üîç Checking .env file...")
        
        issues = []
        env_file = self.base_dir / '.env'
        
        if not env_file.exists():
            issues.append("‚ùå .env file not found")
            return issues
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ .env –≤ .gitignore
        gitignore_file = self.base_dir / '.gitignore'
        if gitignore_file.exists():
            gitignore_content = gitignore_file.read_text()
            if '.env' not in gitignore_content:
                issues.append("‚ùå .env not in .gitignore")
        else:
            issues.append("‚ùå .gitignore file missing")
            
        # –ß–∏—Ç–∞–µ–º .env –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        try:
            env_content = env_file.read_text()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            test_patterns = [
                '–≤–∞—à_api_–∫–ª—é—á',
                'test_key',
                'example_key',
                'your_key_here'
            ]
            
            for pattern in test_patterns:
                if pattern in env_content.lower():
                    issues.append(f"‚ö†Ô∏è Test pattern found in .env: {pattern}")
                    
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
            required_vars = ['BYBIT_API_KEY', 'BYBIT_API_SECRET']
            for var in required_vars:
                if f"{var}=" not in env_content:
                    issues.append(f"‚ùå Missing required variable: {var}")
                    
        except Exception as e:
            issues.append(f"‚ùå Error reading .env: {e}")
            
        return issues
        
    def check_dependencies(self) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        print("üîç Checking dependencies security...")
        
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º pip-audit –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        try:
            result = subprocess.run(
                ['pip-audit', '--format=json'],
                capture_output=True,
                text=True,
                timeout=30
            )
            
            if result.returncode == 0:
                print("‚úÖ pip-audit passed")
            else:
                issues.append("‚ö†Ô∏è pip-audit found vulnerabilities")
                if result.stdout:
                    issues.append(f"Details: {result.stdout[:200]}...")
                    
        except subprocess.TimeoutExpired:
            issues.append("‚ö†Ô∏è pip-audit timeout")
        except FileNotFoundError:
            issues.append("‚ö†Ô∏è pip-audit not installed (pip install pip-audit)")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º safety –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω  
        try:
            result = subprocess.run(
                ['safety', 'check', '--json'],
                capture_output=True,
                text=True,
                timeout=30
            )
            
            if result.returncode == 0:
                print("‚úÖ safety passed")
            else:
                issues.append("‚ö†Ô∏è safety found vulnerabilities")
                
        except (subprocess.TimeoutExpired, FileNotFoundError):
            # Safety –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
            pass
            
        return issues
        
    def check_code_security(self) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞"""
        print("üîç Checking code security...")
        
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º bandit –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        try:
            result = subprocess.run(
                ['bandit', '-r', 'src/', '-f', 'json'],
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if 'No issues identified' in result.stdout:
                print("‚úÖ bandit passed - no issues")
            else:
                issues.append("‚ö†Ô∏è bandit found potential security issues")
                if result.stdout:
                    issues.append(f"Details: bandit analysis completed")
                    
        except subprocess.TimeoutExpired:
            issues.append("‚ö†Ô∏è bandit timeout")
        except FileNotFoundError:
            issues.append("‚ö†Ô∏è bandit not installed (pip install bandit)")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –∫–æ–¥–µ
        dangerous_patterns = [
            (r'eval\s*\(', 'Use of eval() function'),
            (r'exec\s*\(', 'Use of exec() function'),
            (r'__import__\s*\(', 'Use of __import__'),
            (r'pickle\.loads', 'Deserialization with pickle'),
            (r'shell=True', 'subprocess with shell=True'),
        ]
        
        src_dir = self.base_dir / 'src'
        if src_dir.exists():
            for py_file in src_dir.rglob('*.py'):
                try:
                    content = py_file.read_text()
                    for pattern, description in dangerous_patterns:
                        if re.search(pattern, content):
                            issues.append(f"‚ö†Ô∏è {description} in {py_file.name}")
                except Exception:
                    pass
                    
        return issues
        
    def check_configuration(self) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        print("üîç Checking configuration security...")
        
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏
        config_files = [
            'config/config.yaml',
            'config/risk_config.yaml',
            'config/secrets.env.example'
        ]
        
        for config_file in config_files:
            config_path = self.base_dir / config_file
            if not config_path.exists():
                issues.append(f"‚ùå Missing config file: {config_file}")
                
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ config.yaml
        config_path = self.base_dir / 'config/config.yaml'
        if config_path.exists():
            try:
                with open(config_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                if 'emergency_stop_enabled: true' not in content:
                    issues.append("‚ö†Ô∏è Emergency stop might not be enabled")
                    
                if 'max_daily_loss:' in content:
                    if 'max_daily_loss: 1.0' in content:  # –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π –ª–∏–º–∏—Ç
                        issues.append("‚ö†Ô∏è Daily loss limit might be too high")
                        
            except Exception as e:
                issues.append(f"‚ùå Error reading config.yaml: {e}")
                
        return issues
        
    def check_file_permissions(self) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º"""
        print("üîç Checking file permissions...")
        
        issues = []
        
        sensitive_files = [
            '.env',
            'config/secrets.env',
            'logs/',
            '*.log'
        ]
        
        for pattern in sensitive_files:
            matches = list(self.base_dir.rglob(pattern))
            if matches:
                for file_path in matches:
                    if file_path.is_file():
                        # –ù–∞ Windows –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ attrib
                        try:
                            result = subprocess.run(
                                ['attrib', str(file_path)],
                                capture_output=True,
                                text=True
                            )
                            
                            if 'R' not in result.stdout:  # R = read-only
                                issues.append(f"‚ö†Ô∏è {file_path} might be world-readable")
                                
                        except Exception:
                            # –í Linux –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å stat
                            pass
                            
        return issues
        
    def generate_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        print("\n" + "="*60)
        print("üîí COMPREHENSIVE SECURITY REPORT")
        print("="*60)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        all_checks = [
            ("Git History", self.check_git_secrets()),
            (".env Security", self.check_env_file()),
            ("Dependencies", self.check_dependencies()),
            ("Code Security", self.check_code_security()),
            ("Configuration", self.check_configuration()),
            ("File Permissions", self.check_file_permissions())
        ]
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã
        critical_count = 0
        warning_count = 0
        
        report = []
        
        for check_name, issues in all_checks:
            if issues:
                report.append(f"\nüìã {check_name}:")
                for issue in issues:
                    if "üö® CRITICAL" in issue or "‚ùå" in issue:
                        critical_count += 1
                        report.append(f"   {issue}")
                    else:
                        warning_count += 1
                        report.append(f"   {issue}")
            else:
                report.append(f"\n‚úÖ {check_name}: PASSED")
                
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        report.append(f"\n{'='*60}")
        report.append(f"üìä SUMMARY:")
        report.append(f"   üî¥ Critical Issues: {critical_count}")
        report.append(f"   ‚ö†Ô∏è Warnings: {warning_count}")
        
        if critical_count == 0:
            report.append(f"   ‚úÖ Overall Status: SECURE")
        elif critical_count <= 2:
            report.append(f"   ‚ö†Ô∏è Overall Status: NEEDS ATTENTION")
        else:
            report.append(f"   üö® Overall Status: CRITICAL ISSUES")
            
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        report.append(f"\nüîß RECOMMENDATIONS:")
        
        if critical_count > 0:
            report.append(f"   1. Fix all critical issues before production")
            report.append(f"   2. Remove any secrets from git history")
            report.append(f"   3. Secure your .env file")
            
        report.append(f"   4. Install security tools: pip install pip-audit bandit safety")
        report.append(f"   5. Enable GitHub Advanced Security")
        report.append(f"   6. Set up automated security scanning in CI/CD")
        
        return '\n'.join(report)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    print("üîí Starting comprehensive security check...")
    
    try:
        checker = SecurityChecker()
        report = checker.generate_report()
        
        print(report)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_file = Path('security_check_report.txt')
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(report)
            
        print(f"\nüìÑ Report saved to: {report_file}")
        
        return 0
        
    except Exception as e:
        print(f"‚ùå Security check failed: {e}")
        return 1


if __name__ == "__main__":
    sys.exit(main())
