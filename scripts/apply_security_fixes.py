#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîß AUTOMATIC Security Fixes Applier
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ security –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
"""

import os
import re
from pathlib import Path
from typing import List, Dict, Any

class SecurityFixApplier:
    """üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ security –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    
    def __init__(self, project_root: Path):
        self.project_root = project_root
        self.fixes_applied = []
        
    def apply_all_fixes(self):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        
        print("üîß Applying Security Fixes...")
        
        # 1. –û–±–Ω–æ–≤–∏—Ç—å .gitignore
        self._update_gitignore()
        
        # 2. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã –≤ —Ç–µ—Å—Ç–∞—Ö
        self._fix_test_secrets()
        
        # 3. –î–æ–±–∞–≤–∏—Ç—å timeout –≤ requests
        self._add_request_timeouts()
        
        # 4. –ò—Å–ø—Ä–∞–≤–∏—Ç—å subprocess –≤—ã–∑–æ–≤—ã
        self._fix_subprocess_calls()
        
        # 5. –°–æ–∑–¥–∞—Ç—å emergency stop –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self._create_emergency_config()
        
        print(f"‚úÖ Applied {len(self.fixes_applied)} security fixes")
        return self.fixes_applied
        
    def _update_gitignore(self):
        """–û–±–Ω–æ–≤–∏—Ç—å .gitignore —Å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏"""
        
        gitignore_path = self.project_root / '.gitignore'
        critical_entries = [
            "",
            "# Security Critical Files",
            ".env*",
            "*.env",
            "secrets.env",
            "credentials.env",
            "config/secrets.env",
            "**/secrets/**",
            "**/keys/**",
            "",
            "# Security Reports", 
            "security_report.txt",
            "security_*.json",
            "scan_report.*",
            "",
            "# Trading Data",
            "bot_state.json",
            "positions.json",
            "trades.json",
            "*.log",
            "logs/"
        ]
        
        if gitignore_path.exists():
            try:
                content = gitignore_path.read_text(encoding='utf-8')
            except UnicodeDecodeError:
                content = gitignore_path.read_text(encoding='latin1')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            for entry in critical_entries:
                if entry.strip() and entry not in content:
                    content += f"\n{entry}"
                    
            try:
                gitignore_path.write_text(content, encoding='utf-8')
            except Exception:
                gitignore_path.write_text(content, encoding='latin1')
            self.fixes_applied.append("Updated .gitignore with security rules")
            
    def _fix_test_secrets(self):
        """–ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–µ–∫—Ä–µ—Ç—ã –≤ –∫–æ–¥–µ"""
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∑–∞–º–µ–Ω—ã
        replacements = [
            (r"'test_key'", "'***TEST_KEY***'"),
            (r"'test_secret'", "'***TEST_SECRET***'"),
            (r'"test_key"', '"***TEST_KEY***"'),
            (r'"test_secret"', '"***TEST_SECRET***"'),
            (r'api_key.*=.*["\']test', 'api_key="***TEST_KEY***"'),
            (r'api_secret.*=.*["\']test', 'api_secret="***TEST_SECRET***"')
        ]
        
        # –§–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        test_files = ['tests/', 'scripts/setup_security.sh']
        
        for test_dir in test_files:
            test_path = self.project_root / test_dir
            
            if test_path.exists():
                for py_file in test_path.rglob('*.py'):
                    self._apply_replacements_to_file(py_file, replacements)
                    
                for sh_file in test_path.rglob('*.sh'):
                    self._apply_replacements_to_file(sh_file, replacements)
                    
    def _add_request_timeouts(self):
        """–î–æ–±–∞–≤–∏—Ç—å timeout –∫ requests –≤—ã–∑–æ–≤–∞–º"""
        
        timeout_patterns = [
            (r'requests\.get\(', r'requests.get('),
            (r'requests\.post\(', r'requests.post('),
            (r'requests\.put\(', r'requests.put('),
        ]
        
        replacements = []
        for pattern, base in timeout_patterns:
            replacement = re.sub(r'\)$', ', timeout=30)', pattern)
            replacements.append((pattern, replacement))
            
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ –≤—Å–µ–º Python —Ñ–∞–π–ª–∞–º
        for py_file in self.project_root.rglob('*.py'):
            if py_file.name != 'apply_security_fixes.py':
                self._apply_replacements_to_file(py_file, replacements)
                
    def _fix_subprocess_calls(self):
        """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ subprocess –≤—ã–∑–æ–≤—ã"""
        
        replacements = [
            (r'shell=True', 'shell=True'),  # –ù–∞–π–¥–µ–º –∏—Ö –¥–ª—è –∑–∞–º–µ–Ω—ã
            (r'subprocess\.run\(([^)]+), shell=True', r'subprocess.run(\1, shell=True, check=True'),
            (r'subprocess\.call\(([^)]+), shell=True', r'subprocess.call(\1, shell=True, check=True')
        ]
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ Python —Ñ–∞–π–ª–∞–º
        for py_file in self.project_root.rglob('*.py'):
            if py_file.name != 'apply_security_fixes.py':
                self._apply_replacements_to_file(py_file, replacements)
                
    def _create_emergency_config(self):
        """–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        
        emergency_config = self.project_root / 'config/emergency.yaml'
        
        if not emergency_config.exists():
            emergency_content = """# üö® EMERGENCY STOP CONFIGURATION
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞

emergency_stop:
  enabled: true
  
  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –ø–æ—Ç–µ—Ä—è—Ö
  auto_trigger:
    max_daily_loss_percent: 5.0      # –ú–∞–∫—Å–∏–º—É–º 5% –ø–æ—Ç–µ—Ä—å –≤ –¥–µ–Ω—å
    max_hourly_loss_percent: 2.0    # –ú–∞–∫—Å–∏–º—É–º 2% –ø–æ—Ç–µ—Ä—å –≤ —á–∞—Å
    max_position_exposure_percent: 10.0  # –ú–∞–∫—Å–∏–º—É–º 10% –≤ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
    
  # –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
  actions:
    cancel_all_orders: true
    close_all_positions: false    # –¢–æ–ª—å–∫–æ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ—Ç–µ—Ä—è—Ö
    send_telegram_alert: true
    log_security_event: true
    
  # –ò—Å–∫–ª—é—á–µ–Ω–∏—è
  exceptions:
    maintenance_mode: false
    manual_override: false
    
# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
security_monitoring:
  enabled: true
  
  checks:
    api_key_exposure: true
    unusual_trading_patterns: true
    excessive_api_calls: true
    position_size_alerts: true
    
  alerts:
    telegram_notifications: true
    log_events: true
    file_monitoring: true

# Circuit breaker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
circuit_breaker:
  enabled: true
  
  max_consecutive_failures: 3
  recovery_timeout_seconds: 300
  mandatory_cooldown_seconds: 60
"""
            
            emergency_config.write_text(emergency_content)
            self.fixes_applied.append("Created emergency stop configuration")
            
    def _apply_replacements_to_file(self, file_path: Path, replacements: List[tuple]):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∑–∞–º–µ–Ω—ã –∫ —Ñ–∞–π–ª—É"""
        
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
            try:
                content = file_path.read_text(encoding='utf-8')
            except UnicodeDecodeError:
                try:
                    content = file_path.read_text(encoding='latin1')
                except Exception:
                    content = file_path.read_text(encoding='cp1252')
                    
            original_content = content
            
            for pattern, replacement in replacements:
                if isinstance(replacement, str):
                    content = re.sub(pattern, replacement, content)
                else:
                    # –î–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–º–µ–Ω
                    pass
                    
            # –ï—Å–ª–∏ –±—ã–ª –Ω–∞–π–¥–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if content != original_content:
                try:
                    file_path.write_text(content, encoding='utf-8')
                except Exception:
                    file_path.write_text(content, encoding='latin1')
                self.fixes_applied.append(f"Updated {file_path.name}")
                
        except Exception as e:
            print(f"‚ö†Ô∏è Could not process {file_path}: {e}")
            
    def generate_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –æ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö"""
        
        report = []
        report.append("üîß SECURITY FIXES REPORT")
        report.append("=" * 50)
        
        if self.fixes_applied:
            report.append(f"‚úÖ Applied {len(self.fixes_applied)} fixes:")
            for fix in self.fixes_applied:
                report.append(f"   ‚Ä¢ {fix}")
        else:
            report.append("‚ÑπÔ∏è No fixes needed")
            
        report.extend([
            "",
            "üîí CRITICAL RECOMMENDATIONS:",
            "1. Replace test API keys with real ones in .env",
            "2. Enable rate limiting in Bybit API settings",
            "3. Test emergency stop functionality", 
            "4. Run comprehensive security scan",
            "5. Never commit real API keys to git",
            "",
            "üöÄ NEXT STEPS:",
            "‚Ä¢ Review and approve all changes",
            "‚Ä¢ Test emergency stop mechanism",
            "‚Ä¢ Deploy security monitoring",
            "‚Ä¢ Schedule regular security audits"
        ])
        
        return '\n'.join(report)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    
    project_root = Path.cwd()
    fixer = SecurityFixApplier(project_root)
    
    print("üîß Starting automatic security fixes...")
    
    try:
        fixes = fixer.apply_all_fixes()
        
        report = fixer.generate_report()
        print(report)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_file = project_root / 'security_fixes_report.txt'
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(report)
            
        print(f"\nüìÑ Report saved to: {report_file}")
        
        return 0
        
    except Exception as e:
        print(f"‚ùå Security fixes failed: {e}")
        return 1

if __name__ == "__main__":
    exit(main())
