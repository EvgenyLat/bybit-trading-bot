#!/usr/bin/env python3

import os
import sys
from pathlib import Path

def security_check():
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    print("üîí SECURITY STATUS REPORT")
    print("=" * 50)
    
    issues = []
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
    env_file = Path('.env')
    if env_file.exists():
        print("‚úÖ .env file: FOUND")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º .gitignore
        gitignore = Path('.gitignore')
        if gitignore.exists():
            try:
                gitignore_content = gitignore.read_text(encoding='utf-8')
                if '.env' in gitignore_content:
                    print("‚úÖ .env in .gitignore: YES")
                else:
                    issues.append("‚ùå .env NOT in .gitignore")
            except UnicodeDecodeError:
                # –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
                try:
                    gitignore_content = gitignore.read_text(encoding='latin1')
                    if '.env' in gitignore_content:
                        print("‚úÖ .env in .gitignore: YES")
                    else:
                        issues.append("‚ùå .env NOT in .gitignore")
                except Exception as e:
                    issues.append(f"‚ùå Cannot read .gitignore: {e}")
        else:
            issues.append("‚ùå .gitignore missing")
            
        # –ß–∏—Ç–∞–µ–º .env —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
        try:
            env_content = env_file.read_text(encoding='utf-8')
            if '–≤–∞—à_api_–∫–ª—é—á' in env_content.lower():
                issues.append("‚ö†Ô∏è Test API key in .env (replace with real)")
            else:
                print("‚úÖ .env contains real keys")
        except UnicodeDecodeError:
            try:
                env_content = env_file.read_text(encoding='latin1')
                if '–≤–∞—à_api_–∫–ª—é—á' in env_content.lower():
                    issues.append("‚ö†Ô∏è Test API key in .env (replace with real)")
                else:
                    print("‚úÖ .env contains real keys")
            except Exception as e:
                issues.append(f"‚ùå Cannot read .env: {e}")
        except Exception as e:
            issues.append(f"‚ùå Cannot read .env: {e}")
            
    else:
        issues.append("‚ùå .env file NOT FOUND")
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    config_files = [
        'config/config.yaml',
        'config/risk_config.yaml',
        'config/secrets.env.example'
    ]
    
    missing_files = []
    for config_file in config_files:
        if Path(config_file).exists():
            print(f"‚úÖ {config_file}: FOUND")
        else:
            missing_files.append(config_file)
    
    if missing_files:
        issues.append(f"‚ùå Missing files: {', '.join(missing_files)}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    security_modules = [
        'src/config.py',
        'src/secure_executor.py', 
        'scripts/security_check.py'
    ]
    
    for module in security_modules:
        if Path(module).exists():
            print(f"‚úÖ {module}: READY")
        else:
            issues.append(f"‚ùå Security module missing: {module}")
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ GitHub Actions
    github_workflows = Path('.github/workflows')
    if github_workflows.exists():
        print("‚úÖ GitHub Actions: CONFIGURED")
    else:
        issues.append("‚ö†Ô∏è GitHub Actions not configured")
    
    # –ò–¢–û–ì–ò
    print("\n" + "=" * 50)
    print("üìä SECURITY SUMMARY:")
    
    if not issues:
        print("üéâ ALL SECURITY CHECKS PASSED!")
        print("‚úÖ Repository is SECURE")
        print("üöÄ Ready for production deployment")
    else:
        print(f"‚ö†Ô∏è Found {len(issues)} issues:")
        for issue in issues:
            print(f"   {issue}")
            
        if any("‚ùå" in issue for issue in issues):
            print("\nüö® CRITICAL ISSUES FOUND")
            print("Please fix before deploying to production")
        else:
            print("\n‚ö†Ô∏è Minor issues - safe to proceed")
    
    print("\nüîß IMMEDIATE ACTIONS:")
    print("1. Ensure .env has real API keys (not test values)")
    print("2. Test emergency stop: python src/config.py")
    print("3. Verify Bybit testnet connection")
    print("4. Install security tools: pip install pip-audit bandit")
    
    return len(issues) == 0

if __name__ == "__main__":
    secure = security_check()
    sys.exit(0 if secure else 1)
