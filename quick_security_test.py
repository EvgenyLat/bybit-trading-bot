#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîí Quick Security Test for CI/CD
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è GitHub Actions
"""

import os
import sys
from pathlib import Path

def test_security_basics():
    """–ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    print("üîí Running Quick Security Tests")
    print("=" * 40)
    
    issues = []
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ .gitignore
    gitignore = Path('.gitignore')
    if gitignore.exists():
        try:
            content = gitignore.read_text(encoding='utf-8')
            if '.env' in content:
                print("‚úÖ .env in .gitignore")
            else:
                issues.append("‚ùå .env NOT in .gitignore")
        except Exception as e:
            issues.append(f"‚ùå Cannot read .gitignore: {e}")
    else:
        issues.append("‚ùå .gitignore missing")
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
    env_file = Path('.env')
    if env_file.exists():
        try:
            content = env_file.read_text(encoding='utf-8')
            if '–≤–∞—à_api_–∫–ª—é—á' in content.lower():
                issues.append("‚ö†Ô∏è Test API key in .env (replace with real)")
            else:
                print("‚úÖ .env contains real keys")
        except Exception as e:
            issues.append(f"‚ùå Cannot read .env: {e}")
    else:
        print("‚ÑπÔ∏è .env file not found (expected for CI)")
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ security –º–æ–¥—É–ª–µ–π
    security_modules = [
        'scripts/security_check.py',
        'internal_security_scan.py',
        'src/config.py',
        'src/secure_executor.py'
    ]
    
    for module in security_modules:
        if Path(module).exists():
            print(f"‚úÖ {module} exists")
        else:
            issues.append(f"‚ùå {module} missing")
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ GitHub Actions
    workflow = Path('.github/workflows/security-and-tests.yml')
    if workflow.exists():
        print("‚úÖ GitHub Actions workflow configured")
    else:
        issues.append("‚ùå GitHub Actions workflow missing")
    
    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ requirements —Ñ–∞–π–ª–æ–≤
    req_files = ['requirements-production.txt', 'requirements-secure.txt']
    for req_file in req_files:
        if Path(req_file).exists():
            print(f"‚úÖ {req_file} exists")
        else:
            issues.append(f"‚ùå {req_file} missing")
    
    # –ò–¢–û–ì–ò
    print("\n" + "=" * 40)
    print("üìä SECURITY TEST RESULTS:")
    
    if not issues:
        print("üéâ ALL SECURITY TESTS PASSED!")
        print("‚úÖ Repository is SECURE")
        return True
    else:
        print(f"‚ö†Ô∏è Found {len(issues)} issues:")
        for issue in issues:
            print(f"   {issue}")
        return False

def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫"""
    print("\nüì¶ Testing Core Library Imports:")
    
    try:
        import pandas as pd
        print(f"‚úÖ Pandas {pd.__version__}")
    except ImportError as e:
        print(f"‚ùå Pandas import failed: {e}")
        return False
    
    try:
        import numpy as np
        print(f"‚úÖ NumPy {np.__version__}")
    except ImportError as e:
        print(f"‚ùå NumPy import failed: {e}")
        return False
    
    try:
        import yaml
        print("‚úÖ PyYAML")
    except ImportError as e:
        print(f"‚ùå PyYAML import failed: {e}")
        return False
    
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ Quick Security Test for CI/CD Pipeline")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    security_ok = test_security_basics()
    imports_ok = test_imports()
    
    print("\n" + "=" * 50)
    print("üèÜ FINAL RESULTS:")
    
    if security_ok and imports_ok:
        print("‚úÖ ALL TESTS PASSED - CI/CD READY!")
        return 0
    else:
        print("‚ùå SOME TESTS FAILED")
        return 1

if __name__ == "__main__":
    sys.exit(main())