#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –¥–ª—è Bybit
–ë–µ–∑ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è - —Ç–æ–ª—å–∫–æ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
"""

import pandas as pd
import numpy as np
import ta
import time
from datetime import datetime
import yaml
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

class SimpleTradingBot:
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –¥–ª—è Bybit –±–µ–∑ ML"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.data = []
        self.position = None
        self.balance = 1000  # –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å $1000
        self.last_signal = None
        self.trade_history = []
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å)
        self.params = {
            'rsi_oversold': 30,    # RSI –Ω–∏–∂–µ 30 - –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å (–ø–æ–∫—É–ø–∫–∞)
            'rsi_overbought': 70,  # RSI –≤—ã—à–µ 70 - –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å (–ø—Ä–æ–¥–∞–∂–∞)
            'sma_fast': 5,         # –ë—ã—Å—Ç—Ä–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è
            'sma_slow': 20,        # –ú–µ–¥–ª–µ–Ω–Ω–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è
            'risk_per_trade': 0.02, # –†–∏—Å–∫ 2% –Ω–∞ —Å–¥–µ–ª–∫—É
            'take_profit': 0.03,   # –¶–µ–ª–µ–≤–∞—è –ø—Ä–∏–±—ã–ª—å 3%
            'stop_loss': 0.015     # –°—Ç–æ–ø-–ª–æ—Å—Å 1.5%
        }
        
        print("ü§ñ –ü—Ä–æ—Å—Ç–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        print(f"üí∞ –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${self.balance}")
        print("üìä –°—Ç—Ä–∞—Ç–µ–≥–∏—è: RSI + SMA crossover")
        
    def add_price_data(self, price_data):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ü–µ–Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.data.append({
            'timestamp': datetime.now(),
            'close': price_data,
            'volume': 1000  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞
        })
        
        # –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Ç–æ—á–µ–∫
        if len(self.data) > 100:
            self.data.pop(0)
    
    def calculate_technical_indicators(self):
        """–†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        if len(self.data) < self.params['sma_slow']:
            return None
            
        # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ –Ω–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        df = pd.DataFrame(self.data)
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        df['rsi'] = ta.momentum.rsi(df['close'], window=14)
        df['sma_fast'] = ta.trend.sma(df['close'], window=self.params['sma_fast'])
        df['sma_slow'] = ta.trend.sma(df['close'], window=self.params['sma_slow'])
        df['macd'] = ta.trend.macd(df['close'])
        
        return df.iloc[-1]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    
    def generate_signal(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        indicators = self.calculate_technical_indicators()
        if indicators is None:
            return 'WAIT', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö'
        
        signal_score = 0
        reasons = []
        
        # –ü—Ä–∞–≤–∏–ª–æ 1: RSI —Å–∏–≥–Ω–∞–ª—ã
        if indicators['rsi'] < self.params['rsi_oversold']:
            signal_score += 3
            reasons.append(f"RSI –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å ({indicators['rsi']:.1f})")
        elif indicators['rsi'] > self.params['rsi_overbought']:
            signal_score -= 3
            reasons.append(f"RSI –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å ({indicators['rsi']:.1f})")
        
        # –ü—Ä–∞–≤–∏–ª–æ 2: SMA crossover
        if indicators['sma_fast'] > indicators['sma_slow']:
            signal_score += 2
            reasons.append("–í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ SMA")
        elif indicators['sma_fast'] < indicators['sma_slow']:
            signal_score -= 2
            reasons.append("–ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ SMA")
        
        # –ü—Ä–∞–≤–∏–ª–æ 3: MACD —Å–∏–≥–Ω–∞–ª
        if indicators['macd'] > 0:
            signal_score += 1
            reasons.append("MACD –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π")
        else:
            signal_score -= 1
            reasons.append("MACD –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π")
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        if self.position == 'long' and signal_score <= -3:
            return 'CLOSE_LONG', f"–°–∏–≥–Ω–∞–ª –∑–∞–∫—Ä—ã—Ç–∏—è LONG: {', '.join(reasons)}"
        elif self.position == 'short' and signal_score >= 3:
            return 'CLOSE_SHORT', f"–°–∏–≥–Ω–∞–ª –∑–∞–∫—Ä—ã—Ç–∏—è SHORT: {', '.join(reasons)}"
        elif signal_score >= 4:
            return 'BUY', f"–°–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª –ø–æ–∫—É–ø–∫–∏: {', '.join(reasons)}"
        elif signal_score >= 2:
            return 'BUY', f"–°–∏–≥–Ω–∞–ª –ø–æ–∫—É–ø–∫–∏: {', '.join(reasons)}"
        elif signal_score <= -4:
            return 'SELL', f"–°–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª –ø—Ä–æ–¥–∞–∂–∏: {', '.join(reasons)}"
        elif signal_score <= -2:
            return 'SELL', f"–°–∏–≥–Ω–∞–ª –ø—Ä–æ–¥–∞–∂–∏: {', '.join(reasons)}"
        else:
            return 'HOLD', f"–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª (score: {signal_score})"
    
    def calculate_position_size(self, signal, current_price):
        """–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""
        if not self.data:
            return 0
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
        balance_usd = self.balance
        
        if signal in ['BUY', 'SELL']:
            # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫–∞
            risk_amount = balance_usd * self.params['risk_per_trade']
            stop_distance = current_price * self.params['stop_loss']
            position_size_usd = risk_amount / stop_distance * current_price
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –º–∞–∫—Å–∏–º—É–º 10% –æ—Ç –±–∞–ª–∞–Ω—Å–∞
            max_position_size = balance_usd * 0.1
            position_size_usd = min(position_size_usd, max_position_size)
            
            return position_size_usd
        
        return 0
    
    def execute_trade(self, signal, current_price):
        """–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        if signal == 'WAIT':
            return
            
        timestamp = datetime.now()
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π
        if signal in ['CLOSE_LONG', 'CLOSE_SHORT'] and self.position:
            # –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
            trade_pnl = current_price - self.position['entry_price']
            if self.position['side'] == 'short':
                trade_pnl = -trade_pnl
            
            self.balance += trade_pnl
            self.trade_history.append({
                'timestamp': timestamp,
                'action': 'CLOSE',
                'side': self.position['side'],
                'price': current_price,
                'pnl': trade_pnl,
                'balance': self.balance
            })
            
            print(f"üö™ –ó–∞–∫—Ä—ã–ª–∏ {self.position['side']} –ø–æ–∑–∏—Ü–∏—é –∑–∞ ${trade_pnl:.2f}")
            self.position = None
            return
        
        # –û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        if signal in ['BUY', 'SELL'] and self.position is None:
            position_size =(self.calculate_position_size(signal, current_price))
            
            if position_size > 10:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è $10
                side = 'long' if signal == 'BUY' else 'short'
                self.position = {
                    'side': side,
                    'entry_price': current_price,
                    'size': position_size,
                    'timestamp': timestamp
                }
                
                self.trade_history.append({
                    'timestamp': timestamp,
                    'action': 'OPEN',
                    'side': side,
                    'price': current_price,
                    'size': position_size,
                    'balance': self.balance
                })
                
                print(f"üö™ –û—Ç–∫—Ä—ã–ª–∏ {side} –ø–æ–∑–∏—Ü–∏—é –ø–æ —Ü–µ–Ω–µ ${current_price:.2f}")
    
    def get_status(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
        if self.position:
            current_pnl = self.data[-1]['close'] - self.position['entry_price']
            if self.position['side'] == 'short':
                current_pnl = -current_pnl
            
            return {
                'status': 'ACTIVE',
                'balance': self.balance,
                'position': self.position,
                'current_pnl': current_pnl,
                'total_trades': len(self.trade_history)
            }
        else:
            return {
                'status': 'WAITING',
                'balance': self.balance,
                'position': None,
                'total_trades': len(self.trade_history)
            }
    
    def save_state(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞"""
        state = {
            'balance': self.balance,
            'position': self.position,
            'trade_history': self.trade_history,
            'last_update': datetime.now().isoformat()
        }
        
        with open('bot_state.yaml', 'w') as f:
            yaml.dump(state, f)
    
    def print_summary(self):
        """–í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ –ø–æ –±–æ—Ç—É"""
        status = self.get_status()
        
        print("\n" + "="*50)
        print("üìä –°–í–û–î–ö–ê –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê")
        print("="*50)
        print(f"üí∞ –ë–∞–ª–∞–Ω—Å: ${status['balance']:.2f}")
        print(f"üìà –°—Ç–∞—Ç—É—Å: {status['status']}")
        print(f"üîÑ –¢–æ—Ä–≥–æ–≤: {status['total_trades']}")
        
        if status['position']:
            print(f"üìã –ü–æ–∑–∏—Ü–∏—è: {status['position']['side']} @ ${status['position']['entry_price']:.2f}")
            print(f"üíµ –¢–µ–∫—É—â–∏–π PnL: ${status['current_pnl']:.2f}")
        
        if len(self.trade_history) > 0:
            recent_trades = self.trade_history[-3:]
            print("\nüîÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏:")
            for trade in recent_trades:
                print(f"  {trade['timestamp'].strftime('%H:%M')} {trade['action']} {trade['side']} @ ${trade['price']:.2f}")
        
        print("="*50)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞"""
    print("üöÄ –ó–ê–ü–£–°–ö –ü–†–û–°–¢–û–ì–û –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê")
    print("="*50)
    
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
    bot = SimpleTradingBot()
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ü–µ–Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ BTC (–ø—Ä–∏–º–µ—Ä)
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö BTC...")
    btc_prices = [45000, 45150, 44950, 44800, 45200, 45050, 44900, 45100, 45000, 44900, 
                  44750, 44600, 44850, 45000, 45150, 45050, 44900, 44750, 44800, 44950]
    
    for i, price in enumerate(btc_prices):
        print(f"\n‚è∞ –¶–µ–Ω–æ–≤–∞—è —Å–≤–µ—á–∞ {i+1}: ${price:,}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        bot.add_price_data(price)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
        signal, reason = bot.generate_signal()
        print(f"üì° –°–∏–≥–Ω–∞–ª: {signal} - {reason}")
        
        # –ò—Å–ø–æ–ª–Ω—è–µ–º —Å–¥–µ–ª–∫—É
        bot.execute_trade(signal, price)
        
        # –ü—Ä–æ—Å—ã–ø–∞–µ–º—Å—è
        time.sleep(0.5)
    
    # –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É
    bot.print_summary()
    
    print("\nüéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")
    print("üìù –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit API")


if __name__ == "__main__":
    main()
